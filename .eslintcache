[{"/Users/mmangruban/Desktop/github/fare-sale/src/App.js":"1","/Users/mmangruban/Desktop/github/fare-sale/src/reportWebVitals.js":"2","/Users/mmangruban/Desktop/github/fare-sale/src/Helper/Helper.js":"3","/Users/mmangruban/Desktop/github/fare-sale/src/index.js":"4"},{"size":171856,"mtime":1606251734365,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1606153083623,"results":"7","hashOfConfig":"6"},{"size":11223,"mtime":1606153818472,"results":"8","hashOfConfig":"6"},{"size":500,"mtime":1606153083622,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"1lfrzuc",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mmangruban/Desktop/github/fare-sale/src/App.js",["19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48"],"import React, { Component } from 'react';\nimport './App.css';\nimport readXlsxFile from 'read-excel-file';\nimport builder from 'xmlbuilder';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport moment from \"moment\";\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport { comparePrice, compareOriginCode, compareDestinationCode, returnMyCityName, mergeObjects, mergeClub49, makeDateMonthInEnglish, getMyDay, getMyMonth, getMyYear, getMyHour, getMyMinute, getMyTimeOfDay, groupMeByOrigin, getMyFirstTuesday, getMySecondTuesday } from './Helper/Helper';\nimport XMLParser from 'react-xml-parser';\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport { AssertionError } from 'assert';\n\n\n\nconst saleFareHeaders = [\n  [\"SALE_ID\", \"SALE_DATE\", \"OD\", \"ORIG\", \"ORIG_NAME\", \"DEST\", \"DEST_NAME\", \"ADVERTISED_AMOUNT\", \"FIRST_CLASS_CODE\", \"FILED_FARE\", \"TAX\", \"REGION\", \"FARE_TYPE\", \"ROUND_TRIP\"],\n];\n\nconst saleDetailsHeaders = [\n  [\"SALE_ID\", \"LAUNCH_DATE\", \"EMAIL_FREQUENCY\", \"EMAIL_SEGMENTS\", \"PERFORMANCE_MEDIA_INPUT\", \"USER_EXPERIENCE_PROBLEMS\", \"SALE_TYPE\", \"SALE_NAME\", \"OVERLAPPING_TICKETING\", \"TICKETING_START\", \"TICKETING_END\", \"TICKETING_DAYS\", \"TRAVEL_START\", \"TRAVEL_END\", \"TRAVEL_DAYS\", \"TRAVEL_VARIATIONS\", \"COSTA_RICA_TRAVEL_START\", \"COSTA_RICA_TRAVEL_END\", \"COSTA_RICA_TRAVEL_DAYS\", \"MEXICO_TRAVEL_START\", \"MEXICO_TRAVEL_END\", \"MEXICO_TRAVEL_DAYS\",\"HAWAII_TRAVEL_START\", \"HAWAII_TRAVEL_END\", \"HAWAII_TRAVEL_DAYS\", \"BLACKOUT_DATES_FOR_CERTAIN_OD\", \"NUMBER_OF_OD\", \"SEASON_TARGET\", \"ADVANCE_PURCHASE\", \"SAVER_AVAILABLE\", \"COMBO_SALE\", \"LOWEST_PRICE_POINT_SEA\", \"LOWEST_PRICE_POINT_PDX\", \"LOWEST_PRICE_POINT_BAY\", \"LOWEST_PRICE_POINT_LA\", \"LOWEST_PRICE_POINT_ELSE\" ],\n];\n\n\nconst city_caps_conversion = [\n  {\n    AVFM_name: \"ALBUQUERQUE\",\n    Airport_Code: \"ABQ\",\n    City_Name: \"Albuquerque\"\n  },\n  {\n    AVFM_name: \"ARCATA / EUREKA\",\n    Airport_Code: \"ACV\",\n    City_Name: \"Eureka\"\n  },\n  {\n    AVFM_name: \"ADAK ISLAND\",\n    Airport_Code: \"ADK\",\n    City_Name: \"Adak Island\"\n  },\n  {\n    AVFM_name: \"KODIAK\",\n    Airport_Code: \"ADQ\",\n    City_Name: \"Kodiak\"\n  },\n  {\n    AVFM_name: \"KING SALMON\",\n    Airport_Code: \"AKN\",\n    City_Name: \"King Salmon\"\n  },\n  {\n    AVFM_name: \"WALLA WALLA\",\n    Airport_Code: \"ALW\",\n    City_Name: \"Walla Walla\"\n  },\n  {\n    AVFM_name: \"ANCHORAGE\",\n    Airport_Code: \"ANC\",\n    City_Name: \"Anchorage\"\n  },\n  {\n    AVFM_name: \"ATLANTA\",\n    Airport_Code: \"ATL\",\n    City_Name: \"Atlanta\"\n  },\n  {\n    AVFM_name: \"AUSTIN\",\n    Airport_Code: \"AUS\",\n    City_Name: \"Austin\"\n  },\n  {\n    AVFM_name: \"BETHEL\",\n    Airport_Code: \"BET\",\n    City_Name: \"Bethel\"\n  },\n  {\n    AVFM_name: \"BILLINGS\",\n    Airport_Code: \"BIL\",\n    City_Name: \"Billings\"\n  },\n  {\n    AVFM_name: \"BELLINGHAM\",\n    Airport_Code: \"BLI\",\n    City_Name: \"Bellingham\"\n  },\n  {\n    AVFM_name: \"NASHVILLE\",\n    Airport_Code: \"BNA\",\n    City_Name: \"Nashville\"\n  },\n  {\n    AVFM_name: \"BOISE\",\n    Airport_Code: \"BOI\",\n    City_Name: \"Boise\"\n  },\n  {\n    AVFM_name: \"BOSTON\",\n    Airport_Code: \"BOS\",\n    City_Name: \"Boston\"\n  },\n  {\n    AVFM_name: \"BARROW\",\n    Airport_Code: \"BRW\",\n    City_Name: \"Barrow\"\n  },\n  {\n    AVFM_name: \"BURBANK\",\n    Airport_Code: \"BUR\",\n    City_Name: \"Burbank\"\n  },\n  {\n    AVFM_name: \"BALTIMORE / WASHINGTON\",\n    Airport_Code: \"BWI\",\n    City_Name: \"Baltimore\"\n  },\n  {\n    AVFM_name: \"BOZEMAN\",\n    Airport_Code: \"BZN\",\n    City_Name: \"Bozeman\"\n  },\n  {\n    AVFM_name: \"CORDOVA\",\n    Airport_Code: \"CDV\",\n    City_Name: \"Cordova\"\n  },\n  {\n    AVFM_name: \"CHARLESTON\",\n    Airport_Code: \"CHS\",\n    City_Name: \"Charleston\"\n  },\n  {\n    AVFM_name: \"COLUMBUS\",\n    Airport_Code: \"CMH\",\n    City_Name: \"Columbus\"\n  },\n  {\n    AVFM_name: \"COLORADO SPRINGS\",\n    Airport_Code: \"COS\",\n    City_Name: \"Colorado Springs\"\n  },\n  {\n    AVFM_name: \"CANCUN\",\n    Airport_Code: \"CUN\",\n    City_Name: \"Cancun\"\n  },\n  {\n    AVFM_name: \"DALLAS / LOVE FIELD\",\n    Airport_Code: \"DAL\",\n    City_Name: \"Dallas - Love Field\"\n  },\n  {\n    AVFM_name: \"WASHINGTON, D.C. / REAGAN\",\n    Airport_Code: \"DCA\",\n    City_Name: \"Washington - Reagan\"\n  },\n  {\n    AVFM_name: \"DENVER\",\n    Airport_Code: \"DEN\",\n    City_Name: \"Denver\"\n  },\n  {\n    AVFM_name: \"DALLAS / FT. WORTH\",\n    Airport_Code: \"DFW\",\n    City_Name: \"Dallas\"\n  },\n  {\n    AVFM_name: \"DILLINGHAM\",\n    Airport_Code: \"DLG\",\n    City_Name: \"Dillingham\"\n  },\n  {\n    AVFM_name: \"DETROIT\",\n    Airport_Code: \"DTW\",\n    City_Name: \"Detroit\"\n  },\n  {\n    AVFM_name: \"DUTCH HARBOR\",\n    Airport_Code: \"DUT\",\n    City_Name: \"Dutch Harbor\"\n  },\n  {\n    AVFM_name: \"WENATCHEE\",\n    Airport_Code: \"EAT\",\n    City_Name: \"Wenatchee\"\n  },\n  {\n    AVFM_name: \"EL PASO\",\n    Airport_Code: \"ELP\",\n    City_Name: \"El Paso\"\n  },\n  {\n    AVFM_name: \"EUGENE\",\n    Airport_Code: \"EUG\",\n    City_Name: \"Eugene\"\n  },\n  {\n    AVFM_name: \"NEWARK / NEW YORK\",\n    Airport_Code: \"EWR\",\n    City_Name: \"New York - Newark\"\n  },\n  {\n    AVFM_name: \"FAIRBANKS\",\n    Airport_Code: \"FAI\",\n    City_Name: \"Fairbanks\"\n  },\n  {\n    AVFM_name: \"FRESNO / YOSEMITE\",\n    Airport_Code: \"FAT\",\n    City_Name: \"Fresno\"\n  },\n  {\n    AVFM_name: \"KALISPELL / GLACIER PARK\",\n    Airport_Code: \"FCA\",\n    City_Name: \"Kalispell\"\n  },\n  {\n    AVFM_name: \"FLAGSTAFF / SEDONA\",\n    Airport_Code: \"FLG\",\n    City_Name: \"Flagstaff\"\n  },\n  {\n    AVFM_name: \"FORT LAUDERDALE\",\n    Airport_Code: \"FLL\",\n    City_Name: \"Ft Lauderdale\"\n  },\n  {\n    AVFM_name: \"GUADALAJARA\",\n    Airport_Code: \"GDL\",\n    City_Name: \"Guadalajara\"\n  },\n  {\n    AVFM_name: \"SPOKANE\",\n    Airport_Code: \"GEG\",\n    City_Name: \"Spokane\"\n  },\n  {\n    AVFM_name: \"GUSTAVUS\",\n    Airport_Code: \"GST\",\n    City_Name: \"Gustavus\"\n  },\n  {\n    AVFM_name: \"GREAT FALLS\",\n    Airport_Code: \"GTF\",\n    City_Name: \"Great Falls\"\n  },\n  {\n    AVFM_name: \"GUNNISON / CRESTED BUTTE\",\n    Airport_Code: \"GUC\",\n    City_Name: \"Gunnison County / Crested Butte\"\n  },\n  {\n    AVFM_name: \"HAVANA\",\n    Airport_Code: \"HAV\",\n    City_Name: \"Havana\"\n  },\n  {\n    AVFM_name: \"HAYDEN / STEAMBOAT SPRINGS\",\n    Airport_Code: \"HDN\",\n    City_Name: \"Steamboat Springs\"\n  },\n  {\n    AVFM_name: \"HELENA\",\n    Airport_Code: \"HLN\",\n    City_Name: \"Helena\"\n  },\n  {\n    AVFM_name: \"HONOLULU\",\n    Airport_Code: \"HNL\",\n    City_Name: \"Honolulu\"\n  },\n  {\n    AVFM_name: \"WASHINGTON, D.C. / DULLES\",\n    Airport_Code: \"IAD\",\n    City_Name: \"Washington D.C. - Dulles\"\n  },\n  {\n    AVFM_name: \"HOUSTON\",\n    Airport_Code: \"IAH\",\n    City_Name: \"Houston\"\n  },\n  {\n    AVFM_name: \"WICHITA\",\n    Airport_Code: \"ICT\",\n    City_Name: \"Wichita\"\n  },\n  {\n    AVFM_name: \"IDAHO FALLS\",\n    Airport_Code: \"IDA\",\n    City_Name: \"Idaho Falls\"\n  },\n  {\n    AVFM_name: \"INDIANAPOLIS\",\n    Airport_Code: \"IND\",\n    City_Name: \"Indianapolis\"\n  },\n  {\n    AVFM_name: \"NEW YORK\",\n    Airport_Code: \"JFK\",\n    City_Name: \"New York - JFK\"\n  },\n  {\n    AVFM_name: \"JUNEAU\",\n    Airport_Code: \"JNU\",\n    City_Name: \"Juneau\"\n  },\n  {\n    AVFM_name: \"KONA\",\n    Airport_Code: \"KOA\",\n    City_Name: \"Kona\"\n  },\n  {\n    AVFM_name: \"KETCHIKAN\",\n    Airport_Code: \"KTN\",\n    City_Name: \"Ketchikan\"\n  },\n  {\n    AVFM_name: \"LA PAZ\",\n    Airport_Code: \"LAP\",\n    City_Name: \"La Paz\"\n  },\n  {\n    AVFM_name: \"LAS VEGAS\",\n    Airport_Code: \"LAS\",\n    City_Name: \"Las Vegas\"\n  },\n  {\n    AVFM_name: \"LOS ANGELES\",\n    Airport_Code: \"LAX\",\n    City_Name: \"Los Angeles\"\n  },\n  {\n    AVFM_name: \"NEW YORK / LAGUARDIA\",\n    Airport_Code: \"LGA\",\n    City_Name: \"New York - LaGuardia\"\n  },\n  {\n    AVFM_name: \"LONG BEACH\",\n    Airport_Code: \"LGB\",\n    City_Name: \"Long Beach\"\n  },\n  {\n    AVFM_name: \"KAUAI ISLAND\",\n    Airport_Code: \"LIH\",\n    City_Name: \"Kauai\"\n  },\n  {\n    AVFM_name: \"LIBERIA\",\n    Airport_Code: \"LIR\",\n    City_Name: \"Liberia, Costa Rica\"\n  },\n  {\n    AVFM_name: \"LORETO\",\n    Airport_Code: \"LTO\",\n    City_Name: \"Loreto\"\n  },\n  {\n    AVFM_name: \"LEWISTON\",\n    Airport_Code: \"LWS\",\n    City_Name: \"Lewiston\"\n  },\n  {\n    AVFM_name: \"KANSAS CITY\",\n    Airport_Code: \"MCI\",\n    City_Name: \"Kansas City\"\n  },\n  {\n    AVFM_name: \"ORLANDO\",\n    Airport_Code: \"MCO\",\n    City_Name: \"Orlando\"\n  },\n  {\n    AVFM_name: \"MEXICO CITY\",\n    Airport_Code: \"MEX\",\n    City_Name: \"Mexico City\"\n  },\n  {\n    AVFM_name: \"MEDFORD\",\n    Airport_Code: \"MFR\",\n    City_Name: \"Medford\"\n  },\n  {\n    AVFM_name: \"MIAMI\",\n    Airport_Code: \"MIA\",\n    City_Name: \"Miami\"\n  },\n  {\n    AVFM_name: \"MILWAUKEE\",\n    Airport_Code: \"MKE\",\n    City_Name: \"Milwaukee\"\n  },\n  {\n    AVFM_name: \"MAMMOTH / YOSEMITE\",\n    Airport_Code: \"MMH\",\n    City_Name: \"Mammoth Lakes\"\n  },\n  {\n    AVFM_name: \"MONTEREY / CARMEL\",\n    Airport_Code: \"MRY\",\n    City_Name: \"Monterey\"\n  },\n  {\n    AVFM_name: \"MISSOULA\",\n    Airport_Code: \"MSO\",\n    City_Name: \"Missoula\"\n  },\n  {\n    AVFM_name: \"MINNEAPOLIS / ST. PAUL\",\n    Airport_Code: \"MSP\",\n    City_Name: \"Minneapolis\"\n  },\n  {\n    AVFM_name: \"NEW ORLEANS\",\n    Airport_Code: \"MSY\",\n    City_Name: \"New Orleans\"\n  },\n  {\n    AVFM_name: \"MAZATLAN\",\n    Airport_Code: \"MZT\",\n    City_Name: \"Mazatlan\"\n  },\n  {\n    AVFM_name: \"OAKLAND\",\n    Airport_Code: \"OAK\",\n    City_Name: \"Oakland\"\n  },\n  {\n    AVFM_name: \"KAHULUI\",\n    Airport_Code: \"OGG\",\n    City_Name: \"Maui\"\n  },\n  {\n    AVFM_name: \"OKLAHOMA CITY\",\n    Airport_Code: \"OKC\",\n    City_Name: \"Oklahoma City\"\n  },\n  {\n    AVFM_name: \"OMAHA\",\n    Airport_Code: \"OMA\",\n    City_Name: \"Omaha\"\n  },\n  {\n    AVFM_name: \"NOME\",\n    Airport_Code: \"OME\",\n    City_Name: \"Nome\"\n  },\n  {\n    AVFM_name: \"ONTARIO\",\n    Airport_Code: \"ONT\",\n    City_Name: \"Ontario\"\n  },\n  {\n    AVFM_name: \"CHICAGO\",\n    Airport_Code: \"ORD\",\n    City_Name: \"Chicago\"\n  },\n  {\n    AVFM_name: \"KOTZEBUE\",\n    Airport_Code: \"OTZ\",\n    City_Name: \"Kotzebue\"\n  },\n  {\n    AVFM_name: \"EVERETT / PAINE FIELD\",\n    Airport_Code: \"PAE\",\n    City_Name: \"Everett / Paine Field\"\n  },\n  {\n    AVFM_name: \"PORTLAND\",\n    Airport_Code: \"PDX\",\n    City_Name: \"Portland\"\n  },\n  {\n    AVFM_name: \"PHILADELPHIA\",\n    Airport_Code: \"PHL\",\n    City_Name: \"Philadelphia\"\n  },\n  {\n    AVFM_name: \"PHOENIX\",\n    Airport_Code: \"PHX\",\n    City_Name: \"Phoenix\"\n  },\n  {\n    AVFM_name: \"PITTSBURGH\",\n    Airport_Code: \"PIT\",\n    City_Name: \"Pittsburgh\"\n  },\n  {\n    AVFM_name: \"PRESCOTT / VERDE VALLEY\",\n    Airport_Code: \"PRC\",\n    City_Name: \"Prescott\"\n  },\n  {\n    AVFM_name: \"PASCO\",\n    Airport_Code: \"PSC\",\n    City_Name: \"Pasco\"\n  },\n  {\n    AVFM_name: \"PETERSBURG\",\n    Airport_Code: \"PSG\",\n    City_Name: \"Petersburg\"\n  },\n  {\n    AVFM_name: \"PALM SPRINGS\",\n    Airport_Code: \"PSP\",\n    City_Name: \"Palm Springs\"\n  },\n  {\n    AVFM_name: \"PULLMAN / MOSCOW\",\n    Airport_Code: \"PUW\",\n    City_Name: \"Pullman\"\n  },\n  {\n    AVFM_name: \"PUERTO VALLARTA\",\n    Airport_Code: \"PVR\",\n    City_Name: \"Puerto Vallarta\"\n  },\n  {\n    AVFM_name: \"REDDING\",\n    Airport_Code: \"RDD\",\n    City_Name: \"Redding\"\n  },\n  {\n    AVFM_name: \"REDMOND / BEND\",\n    Airport_Code: \"RDM\",\n    City_Name: \"Redmond\"\n  },\n  {\n    AVFM_name: \"RALEIGH-DURHAM\",\n    Airport_Code: \"RDU\",\n    City_Name: \"Raleigh-Durham\"\n  },\n  {\n    AVFM_name: \"RENO / TAHOE\",\n    Airport_Code: \"RNO\",\n    City_Name: \"Reno\"\n  },\n  {\n    AVFM_name: \"SAN DIEGO\",\n    Airport_Code: \"SAN\",\n    City_Name: \"San Diego\"\n  },\n  {\n    AVFM_name: \"SAN ANTONIO\",\n    Airport_Code: \"SAT\",\n    City_Name: \"San Antonio\"\n  },\n  {\n    AVFM_name: \"SANTA BARBARA\",\n    Airport_Code: \"SBA\",\n    City_Name: \"Santa Barbara\"\n  },\n  {\n    AVFM_name: \"SAN LUIS OBISPO\",\n    Airport_Code: \"SBP\",\n    City_Name: \"San Luis Obispo\"\n  },\n  {\n    AVFM_name: \"PRUDHOE BAY\",\n    Airport_Code: \"SCC\",\n    City_Name: \"Prudhoe Bay\"\n  },\n  {\n    AVFM_name: \"SEATTLE\",\n    Airport_Code: \"SEA\",\n    City_Name: \"Seattle\"\n  },\n  {\n    AVFM_name: \"SAN FRANCISCO\",\n    Airport_Code: \"SFO\",\n    City_Name: \"San Francisco\"\n  },\n  {\n    AVFM_name: \"SITKA\",\n    Airport_Code: \"SIT\",\n    City_Name: \"Sitka\"\n  },\n  {\n    AVFM_name: \"SAN JOSE\",\n    Airport_Code: \"SJC\",\n    City_Name: \"San Jose\"\n  },\n  {\n    AVFM_name: \"SAN JOSE CABO\",\n    Airport_Code: \"SJD\",\n    City_Name: \"Los Cabos\"\n  },\n  {\n    AVFM_name: \"SAN JOSE COSTA RICA\",\n    Airport_Code: \"SJO\",\n    City_Name: \"San Jose, Costa Rica\"\n  },\n  {\n    AVFM_name: \"SALT LAKE CITY\",\n    Airport_Code: \"SLC\",\n    City_Name: \"Salt Lake City\"\n  },\n  {\n    AVFM_name: \"SACRAMENTO\",\n    Airport_Code: \"SMF\",\n    City_Name: \"Sacramento\"\n  },\n  {\n    AVFM_name: \"ORANGE COUNTY / JOHN WAYNE\",\n    Airport_Code: \"SNA\",\n    City_Name: \"Orange County\"\n  },\n  {\n    AVFM_name: \"ST LOUIS\",\n    Airport_Code: \"STL\",\n    City_Name: \"St Louis\"\n  },\n  {\n    AVFM_name: \"SANTA ROSA / SONOMA CO\",\n    Airport_Code: \"STS\",\n    City_Name: \"Santa Rosa\"\n  },\n  {\n    AVFM_name: \"SUN VALLEY\",\n    Airport_Code: \"SUN\",\n    City_Name: \"Sun Valley\"\n  },\n  {\n    AVFM_name: \"TAMPA\",\n    Airport_Code: \"TPA\",\n    City_Name: \"Tampa\"\n  },\n  {\n    AVFM_name: \"TUCSON\",\n    Airport_Code: \"TUS\",\n    City_Name: \"Tucson\"\n  },\n  {\n    AVFM_name: \"WRANGELL\",\n    Airport_Code: \"WRG\",\n    City_Name: \"Wrangell\"\n  },\n  {\n    AVFM_name: \"YAKUTAT\",\n    Airport_Code: \"YAK\",\n    City_Name: \"Yakutat\"\n  },\n  {\n    AVFM_name: \"EDMONTON\",\n    Airport_Code: \"YEG\",\n    City_Name: \"Edmonton\"\n  },\n  {\n    AVFM_name: \"YAKIMA\",\n    Airport_Code: \"YKM\",\n    City_Name: \"Yakima\"\n  },\n  {\n    AVFM_name: \"KELOWNA\",\n    Airport_Code: \"YLW\",\n    City_Name: \"Kelowna\"\n  },\n  {\n    AVFM_name: \"VANCOUVER\",\n    Airport_Code: \"YVR\",\n    City_Name: \"Vancouver\"\n  },\n  {\n    AVFM_name: \"CALGARY\",\n    Airport_Code: \"YYC\",\n    City_Name: \"Calgary\"\n  },\n  {\n    AVFM_name: \"VICTORIA\",\n    Airport_Code: \"YYJ\",\n    City_Name: \"Victoria\"\n  },\n  {\n    AVFM_name: \"IXTAPA/ZIHUATANEJO\",\n    Airport_Code: \"ZIH\",\n    City_Name: \"Ixtapa\"\n  },\n  {\n    AVFM_name: \"MANZANILLO\",\n    Airport_Code: \"ZLO\",\n    City_Name: \"Manzanillo\"\n  },\n  {\n    AVFM_name: \"FORT MEYERS\",\n    Airport_Code: \"RSW\",\n    City_Name: \"Fort Meyers\"\n  },\n  {\n    AVFM_name: \"COLD BAY\",\n    Airport_Code: \"CDB\",\n    City_Name: \"Cold Bay\"\n  },\n  {\n    AVFM_name: \"FORT MYERS\",\n    Airport_Code: \"RSW\",\n    City_Name: \"Fort Myers\"\n  },\n  {\n    AVFM_name: \"JACKSON HOLE\",\n    Airport_Code: \"JAC\",\n    City_Name: \"Jackson Hole\"\n  },\n\n\n ];\n\n\n\nclass App extends Component {\n\n  // handleInputChange = (event) =>{\n  //   readXlsxFile(event.files[0]).then((rows) => {\n  //     // `rows` is an array of rows\n  //     // each row being an array of cells.\n  //     console.log(rows);\n  //   })\n  // }\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hidden_sheet : 4,\n      selectedOption:'Saver',\n      club49_sheet: false,\n      xmloutput: '',\n      copied: false,\n      all_my_fares: [],\n      default_markets: [],\n      combined_saver_and_main: [],\n      exceptions: [{ code_origin: '', code_destination: '', travel_valid: '', service_begins: null, service_ends: null, begins_string:'', ends_string:'' }],\n      pulled_exception_fares:[],\n      firstinput: 'Initial data...',\n      advance_purchase: '',\n      sale_start_date: null,\n      sale_start_date_string: '',\n      sale_end_date: null,\n      sale_end_date_string: '',\n      travel_start_alaska_to_from_hawaii: null,\n      travel_start_alaska_to_from_hawaii_string: '',\n      travel_start_hawaii: null,\n      travel_start_hawaii_string: '',\n      travel_start_mexico: null,\n      travel_start_mexico_string: '',\n      travel_start_costa_rica: null,\n      travel_start_costa_rica_string: '',\n      travel_start_florida: null,\n      travel_start_florida_string: '',\n      travel_start_others: null,\n      travel_start_others_string: '',\n\n      //Club 49 variables\n      travel_from_to_us: null,\n      travel_from_to_us_string: '',\n      travel_from_within_alaska: null,\n      travel_from_within_alaska_string: '',\n      travel_by_to_us: null,\n      travel_by_to_us_string: '',\n      travel_by_within_alaska: null,\n      travel_by_within_alaska_string: '',\n      days_availability_to_us: 'Sunday, Monday, and Tuesday',\n      days_availability_within_alaska: 'Monday through Thursday and Saturday',\n\n      proposed_from_clu49: null,\n      proposed_from_clu49_string: '',\n      proposed_to_clu49: null,\n      proposed_to_clu49_string: '',\n      //Club 49 variables\n\n\n      travel_end_alaska_to_from_hawaii: null,\n      travel_end_alaska_to_from_hawaii_string: '',\n      travel_end_hawaii: null,\n      travel_end_hawaii_string: '',\n      travel_end_mexico: null,\n      travel_end_mexico_string: '',\n      travel_end_costa_rica: null,\n      travel_end_costa_rica_string: '',\n      travel_end_florida: null,\n      travel_end_florida_string: '',\n      travel_end_others: null,\n      travel_end_others_string: '',\n\n\n\n      days_availability_hawaii: 'Mondays through Thursdays',\n      days_availability_mexico: 'Sundays through Wednesdays',\n      days_availability_costa_rica: 'Sundays through Wednesdays',\n      days_availability_to_florida: 'Mondays, Tuesdays, and Wednesdays',\n      days_availability_from_florida: 'Tuesdays, Wednesdays, and Thursdays',\n      days_availability_others: 'Tuesdays, Wednesdays, and Saturdays',\n\n\n      proposed_start_pae:null,\n      proposed_start_pae_string: '',\n      proposed_end_pae:null,\n      proposed_end_pae_string: '',\n      proposed_start_hawaii:null,\n      proposed_start_hawaii_string: '',\n      proposed_end_hawaii:null,\n      proposed_end_hawaii_string: '',\n      proposed_start_others:null,\n      proposed_start_others_string: '',\n      proposed_end_others:null,\n      proposed_end_others_string: '',\n\n\n      blackout_start_alaska_to_from_hawaii:null,\n      blackout_start_alaska_to_from_hawaii_string: '',\n      blackout_end_alaska_to_from_hawaii:null,\n      blackout_end_alaska_to_from_hawaii_string: '',\n      blackout_start_to_hawaii:null,\n      blackout_start_to_hawaii_string: '',\n      blackout_end_to_hawaii:null,\n      blackout_end_to_hawaii_string: '',\n      blackout_start_from_hawaii:null,\n      blackout_start_from_hawaii_string: '',\n      blackout_end_from_hawaii:null,\n      blackout_end_from_hawaii_string: '',\n      blackout_start_mexico:null,\n      blackout_start_mexico_string: '',\n      blackout_end_mexico:null,\n      blackout_end_mexico_string: '',\n      blackout_start_costa_rica:null,\n      blackout_start_costa_rica_string: '',\n      blackout_end_costa_rica:null,\n      blackout_end_costa_rica_string: '',\n      blackout_start_others:null,\n      blackout_start_others_string: '',\n      blackout_end_others:null,\n      blackout_end_others_string: '',\n\n      showdata : this.displayData,\n      postVal : \"\",\n      textareaedit: true,\n      sale_type: '',\n      sale_objective: ''\n    }\n\n    this.displayData = [];\n\n    this.onFileChange = this.onFileChange.bind(this);\n    // this.cleanFile = this.cleanFile.bind(this);\n\n    this.saveDefaultMarkets = this.saveDefaultMarkets.bind(this);\n    this.grabDefaultsFromSheet = this.grabDefaultsFromSheet.bind(this);\n\n    this.updateFirstInput = this.updateFirstInput.bind(this);\n\n    this.createSaleDetails = this.createSaleDetails.bind(this);\n\n    this.saleStartDateHandler = this.saleStartDateHandler.bind(this);\n    this.saleEndDateHandler = this.saleEndDateHandler.bind(this);\n    this.advancePurchaseHandler = this.advancePurchaseHandler.bind(this);\n\n\n    this.travelStartAlaskaToFromHawaiiDateHandler = this.travelStartAlaskaToFromHawaiiDateHandler.bind(this);\n    this.travelStartHawaiiHandler = this.travelStartHawaiiHandler.bind(this);\n    this.travelStartMexicoHandler = this.travelStartMexicoHandler.bind(this);\n    this.travelStartCostaRicaHandler = this.travelStartCostaRicaHandler.bind(this);\n    //this.travelStartFloridaHandler = this.travelStartFloridaHandler.bind(this);\n    this.travelStartOthersHandler = this.travelStartOthersHandler.bind(this);\n\n\n    this.travelEndAlaskaToFromHawaiiDateHandler = this.travelEndAlaskaToFromHawaiiDateHandler.bind(this);\n    this.travelEndHawaiiHandler = this.travelEndHawaiiHandler.bind(this);\n    this.travelEndMexicoHandler = this.travelEndMexicoHandler.bind(this);\n    this.travelEndCostaRicaHandler = this.travelEndCostaRicaHandler.bind(this);\n    //this.travelEndFloridaHandler = this.travelEndFloridaHandler.bind(this);\n    this.travelEndOthersHandler = this.travelEndOthersHandler.bind(this);\n\n\n    this.daysAvailabilityHawaiiHandler = this.daysAvailabilityHawaiiHandler.bind(this);\n    this.daysAvailabilityMexicoHandler = this.daysAvailabilityMexicoHandler.bind(this);\n    this.daysAvailabilityCostaRicaHandler = this.daysAvailabilityCostaRicaHandler.bind(this);\n    this.daysAvailabilityToFloridaHandler = this.daysAvailabilityToFloridaHandler.bind(this);\n    this.daysAvailabilityFromFloridaHandler = this.daysAvailabilityFromFloridaHandler.bind(this);\n    this.daysAvailabilityOthersHandler = this.daysAvailabilityOthersHandler.bind(this);\n\n\n    this.proposedStartDateHawaiiHandler = this.proposedStartDateHawaiiHandler.bind(this);\n    this.proposedEndDateHawaiiHandler = this.proposedEndDateHawaiiHandler.bind(this);\n    this.proposedStartDateOthersHandler = this.proposedStartDateOthersHandler.bind(this);\n    this.proposedEndDateOthersHandler = this.proposedEndDateOthersHandler.bind(this);\n\n\n    this.blackoutStartDateAlaskaToFromHawaiiHandler = this.blackoutStartDateAlaskaToFromHawaiiHandler.bind(this);\n    this.blackoutEndDateAlaskaToFromHawaiiHandler = this.blackoutEndDateAlaskaToFromHawaiiHandler.bind(this);\n    this.blackoutStartDateToHawaiiHandler = this.blackoutStartDateToHawaiiHandler.bind(this);\n    this.blackoutEndDateToHawaiiHandler = this.blackoutEndDateToHawaiiHandler.bind(this);\n    this.blackoutStartDateFromHawaiiHandler = this.blackoutStartDateFromHawaiiHandler.bind(this);\n    this.blackoutEndDateFromHawaiiHandler = this.blackoutEndDateFromHawaiiHandler.bind(this);\n    this.blackoutStartDateMexicoHandler = this.blackoutStartDateMexicoHandler.bind(this);\n    this.blackoutEndDateMexicoHandler = this.blackoutEndDateMexicoHandler.bind(this);\n    this.blackoutStartDateCostaRicaHandler = this.blackoutStartDateCostaRicaHandler.bind(this);\n    this.blackoutEndDateCostaRicaHandler = this.blackoutEndDateCostaRicaHandler.bind(this);\n    this.blackoutStartDateOthersHandler = this.blackoutStartDateOthersHandler.bind(this);\n    this.blackoutEndDateOthersHandler = this.blackoutEndDateOthersHandler.bind(this);\n\n\n  }\n\n  componentDidMount(){\n    // fetch('https://resource.alaskaair.net/-/media/files/deals/qa-files/qa-winter-sale')\n    // .then(response => response.text())\n    // .then((response) => {\n\n    //     var xml = new XMLParser().parseFromString(response);    // Assume xmlText contains the example XML\n\n    //     //console.log(xml);\n    //     //console.log(xml.getElementsByTagName('TravelDates'));\n    //     let deal_set_elem = xml.getElementsByTagName('DealSet');\n\n    //     this.setState({\n    //       xml_response: deal_set_elem\n    //     });\n\n\n\n    // }).catch((err) => {\n    //     console.log('fetch', err)\n    // })\n\n  }\n\n\n\n\n  updateFirstInput(e) {\n    this.setState({firstinput: e.target.value});\n  }\n\n  markAsDefault(def_market){\n\n    let array_all_combined_prices = [...this.state.combined_saver_and_main];\n\n    this.state.combined_saver_and_main.some((item) => {\n      if(def_market === item.name && item.default !== true){\n        // if(item.default === false){\n          let index = array_all_combined_prices.indexOf(item);\n          // console.log(index + \" \" + item.name);\n          if (index !== -1) {\n            item['default'] = true;\n          }\n        // }\n      }\n    });\n\n  }\n\n\n\n  saveDefaultMarkets(e) {\n\n    let temp_val = e.target.value;\n    temp_val = temp_val.split('\\n');\n\n    const new_defaults = temp_val.map((item) => {\n\n      let split_market_and_price = item.replace(/\\s/g,'');\n      split_market_and_price = split_market_and_price.match(/.{1,6}/g);\n      return {\n        default_market: split_market_and_price[0],\n        default_price: split_market_and_price[1]\n      };\n\n\n    });\n\n    //Loop through default markets array and pass each code pair to markAsDefault function to make each default fare a default market\n    new_defaults.map((myobj) => {\n      this.markAsDefault(myobj['default_market']);\n    });\n\n    this.setState({\n      default_markets: new_defaults\n    });\n\n  }\n\n\n\n\n\n  grabDefaultsFromSheet(pair, price) {\n\n    // let temp_pair = pair;\n    // let temp_price = price;\n    let new_defaults = [];\n    let temp_obj = {\n      default_market: pair,\n      default_price: price\n    }\n\n\n    //let new_defaults.push(temp_obj);\n\n\n    //Loop through default markets array and pass each code pair to markAsDefault function to make each default fare a default market\n    new_defaults.map((myobj) => {\n      this.markAsDefault(myobj['default_market']);\n    });\n\n    this.setState({\n      default_markets: new_defaults\n    });\n\n  }\n\n\n\n\n\n  saleStartDateHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n\n    this.setState({\n      sale_start_date: date,\n      sale_start_date_string: temp_string\n    });\n\n    //console.log(verifyMyAirportCode(\"SJC\"));\n\n    //console.log(\"Sale Start Date: \"+this.state.sale_start_date);\n    // console.log(\"Sale Start Date String: \"+this.state.sale_start_date_string);\n  }\n\n\n\n  saleEndDateHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      sale_end_date: date,\n      sale_end_date_string: temp_string\n    });\n  }\n\n\n  advancePurchaseHandler(e) {\n    this.setState({\n      advance_purchase: e.target.value\n    });\n  }\n\n\n  travelStartAlaskaToFromHawaiiDateHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      travel_start_alaska_to_from_hawaii: date,\n      travel_start_alaska_to_from_hawaii_string: temp_string\n    });\n  }\n  travelStartHawaiiHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      travel_start_hawaii: date,\n      travel_start_hawaii_string: temp_string\n    });\n  }\n  travelStartMexicoHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      travel_start_mexico: date,\n      travel_start_mexico_string: temp_string\n    });\n  }\n  travelStartCostaRicaHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      travel_start_costa_rica: date,\n      travel_start_costa_rica_string: temp_string\n    });\n  }\n  // travelStartFloridaHandler(date) {\n  //   this.setState({travel_start_florida: moment(date).format('YYYY-MM-DD')});\n  //   console.log(\"Travel Start Date - Florida: \"+moment(date).format('YYYY-MM-DD'));\n  // }\n  travelStartOthersHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      travel_start_others: date,\n      travel_start_others_string: temp_string,\n      travel_start_florida: date,\n      travel_start_florida_string: temp_string\n    });\n  }\n\n\n\n\n  travelEndAlaskaToFromHawaiiDateHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      travel_end_alaska_to_from_hawaii: date,\n      travel_end_alaska_to_from_hawaii_string: temp_string\n    });\n  }\n  travelEndHawaiiHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      travel_end_hawaii: date,\n      travel_end_hawaii_string: temp_string\n    });\n  }\n  travelEndMexicoHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      travel_end_mexico: date,\n      travel_end_mexico_string: temp_string\n    });\n  }\n  travelEndCostaRicaHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      travel_end_costa_rica: date,\n      travel_end_costa_rica_string: temp_string,\n    });\n  }\n  // travelEndFloridaHandler(date) {\n  //   this.setState({travel_end_florida: moment(date).format('YYYY-MM-DD')});\n  //   console.log(\"Completed Travel By - Florida: \"+moment(date).format('YYYY-MM-DD'));\n  // }\n  travelEndOthersHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      travel_end_others: date,\n      travel_end_others_string: temp_string,\n      travel_end_florida: date,\n      travel_end_florida_string: temp_string\n    });\n  }\n\n\n\n  daysAvailabilityHawaiiHandler(e) {\n    this.setState({\n      days_availability_hawaii: e.target.value\n    });\n  }\n  daysAvailabilityMexicoHandler(e) {\n    this.setState({\n      days_availability_mexico: e.target.value\n    });\n  }\n  daysAvailabilityCostaRicaHandler(e) {\n    this.setState({\n      days_availability_costa_rica: e.target.value\n    });\n  }\n  daysAvailabilityToFloridaHandler(e) {\n    this.setState({\n      days_availability_to_florida: e.target.value\n    });\n  }\n  daysAvailabilityFromFloridaHandler(e) {\n    this.setState({\n      days_availability_from_florida: e.target.value\n    });\n  }\n  daysAvailabilityOthersHandler(e) {\n    this.setState({\n      days_availability_others: e.target.value\n    });\n  }\n\n\n  proposedStartDatePAEHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      proposed_start_pae: date,\n      proposed_start_pae_string: temp_string\n    });\n  }\n  proposedEndDatePAEHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      proposed_end_pae: date,\n      proposed_end_pae_string: temp_string\n    });\n  }\n\n  proposedStartDateHawaiiHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      proposed_start_hawaii: date,\n      proposed_start_hawaii_string: temp_string\n    });\n  }\n  proposedEndDateHawaiiHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      proposed_end_hawaii: date,\n      proposed_end_hawaii_string: temp_string\n    });\n  }\n  proposedStartDateOthersHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      proposed_start_others: date,\n      proposed_start_others_string: temp_string\n    });\n  }\n  proposedEndDateOthersHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      proposed_end_others: date,\n      proposed_end_others_string: temp_string\n    });\n  }\n\n\n\n\n  blackoutStartDateAlaskaToFromHawaiiHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      blackout_start_alaska_to_from_hawaii: date,\n      blackout_start_alaska_to_from_hawaii_string: temp_string\n    });\n  }\n  blackoutEndDateAlaskaToFromHawaiiHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      blackout_end_alaska_to_from_hawaii: date,\n      blackout_end_alaska_to_from_hawaii_string: temp_string\n    });\n  }\n  blackoutStartDateToHawaiiHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      blackout_start_to_hawaii: date,\n      blackout_start_to_hawaii_string: temp_string\n    });\n  }\n  blackoutEndDateToHawaiiHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      blackout_end_to_hawaii: date,\n      blackout_end_to_hawaii_string: temp_string\n    });\n  }\n  blackoutStartDateFromHawaiiHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      blackout_start_from_hawaii: date,\n      blackout_start_from_hawaii_string: temp_string\n    });\n  }\n  blackoutEndDateFromHawaiiHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      blackout_end_from_hawaii: date,\n      blackout_end_from_hawaii_string: temp_string\n    });\n  }\n  blackoutStartDateMexicoHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      blackout_start_mexico: date,\n      blackout_start_mexico_string: temp_string\n    });\n  }\n  blackoutEndDateMexicoHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      blackout_end_mexico: date,\n      blackout_end_mexico_string: temp_string\n    });\n  }\n  blackoutStartDateCostaRicaHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      blackout_start_costa_rica: date,\n      blackout_start_costa_rica_string: temp_string\n    });\n  }\n  blackoutEndDateCostaRicaHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      blackout_end_costa_rica: date,\n      blackout_end_costa_rica_string: temp_string\n    });\n  }\n  blackoutStartDateOthersHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      blackout_start_others: date,\n      blackout_start_others_string:temp_string\n    });\n  }\n  blackoutEndDateOthersHandler(date) {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      blackout_end_others: date,\n      blackout_end_others_string: temp_string\n    });\n  }\n\n\n  formatMyDateForCSV = (date) => {\n    let temp_date = moment(date).format('MM/DD/YYYY');\n    return temp_date;\n  }\n\n\n\n  generateMySaleFaresCSV = (allfares) => {\n\n    let sale_start = this.state.sale_start_date_string;\n    sale_start = sale_start.replace(/-/g, \"\");\n\n    this.setState({\n      mycsvfilename: sale_start+\"_Flash-Sale\"\n    });\n\n    console.log(allfares);\n\n\n    // allfares = allfares.splice(0, 5);\n    // console.log(\"combined_array: \"+JSON.stringify(allfares));\n    allfares.map((item) => {\n//[\"SALE_ID\", \"SALE_DATE\", \"OD\", \"ORIG\", \"ORIG_NAME\", \"DEST\", \"DEST_NAME\", \"ADVERTISED_AMOUNT\", \"FIRST_CLASS_CODE\", \"FILED_FARE\", \"TAX\", \"REGION\", \"FARE_TYPE\", \"ROUND_TRIP\"],\n        let temp_array = [];\n        temp_array.push(sale_start+\"_\"+item.name+\"-\"+item.fare_type, sale_start, item.name, item.origin_code, item.origin_city, item.destination_code, item.destination_city, item.price, item.fare_class_code, item.filed_fare, item.taxes, item.shortened_region, item.fare_type, item.round_trip);\n        saleFareHeaders.push(temp_array);\n\n    });\n\n\n    console.log(\"CSV DATA: \"+JSON.stringify(saleFareHeaders));\n  }\n\n\n\n  generateMySaleDetailsCSV = () => {\n\n    let sale_start = this.state.sale_start_date_string;\n    sale_start = sale_start.replace(/-/g, \"\");\n\n    this.setState({\n      mycsvsaledetailsfilename: sale_start+\"_Sale-DETAILS\"\n    });\n\n\n// [\"SALE_ID\", \"LAUNCH_DATE\", \"EMAIL_FREQUENCY\", \"EMAIL_SEGMENTS\", \"PERFORMANCE_MEDIA_INPUT\", \"USER_EXPERIENCE_PROBLEMS\", \"SALE_TYPE\", \"SALE_NAME\", \"OVERLAPPING_TICKETING\", \"TICKETING_START\", \"TICKETING_END\", \"TICKETING_DAYS\", \"TRAVEL_START\", \"TRAVEL_END\", \"TRAVEL_DAYS\", \"TRAVEL_VARIATIONS\", \"COSTA_RICA_TRAVEL_START\", \"COSTA_RICA_TRAVEL_END\", \"COSTA_RICA_TRAVEL_DAYS\", \"MEXICO_TRAVEL_START\", \"MEXICO_TRAVEL_END\", \"MEXICO_TRAVEL_DAYS\",\"HAWAII_TRAVEL_START\", \"HAWAII_TRAVEL_END\", \"HAWAII_TRAVEL_DAYS\", \"BLACKOUT_DATES_FOR_CERTAIN_OD\", \"NUMBER_OF_OD\", \"SEASON_TARGET\", \"ADVANCE_PURCHASE\", \"SAVER_AVAILABLE\", \"COMBO_SALE\", \"LOWEST_PRICE_POINT_SEA\", \"LOWEST_PRICE_POINT_PDX\", \"LOWEST_PRICE_POINT_BAY\", \"LOWEST_PRICE_POINT_LA\", \"LOWEST_PRICE_POINT_ELSE\" ],\n\n    let temp_array = [];\n    temp_array.push(sale_start, this.formatMyDateForCSV(this.state.sale_start_date), '', '', '', '', this.state.sale_type, this.state.sale_objective, '', this.formatMyDateForCSV(this.state.sale_start_date), this.formatMyDateForCSV(this.state.sale_end_date), '', this.formatMyDateForCSV(this.state.travel_start_others), this.formatMyDateForCSV(this.state.travel_end_others), '', '', this.formatMyDateForCSV(this.state.travel_start_costa_rica), this.formatMyDateForCSV(this.state.travel_end_costa_rica), '', this.formatMyDateForCSV(this.state.travel_start_mexico), this.formatMyDateForCSV(this.state.travel_end_mexico), '', this.formatMyDateForCSV(this.state.travel_start_alaska_to_from_hawaii), this.formatMyDateForCSV(this.state.travel_end_alaska_to_from_hawaii), '', this.formatMyDateForCSV(this.state.blackout_start_others)+\" to \"+ this.formatMyDateForCSV(this.state.blackout_end_others), this.state.number_of_distinct_od, '', this.state.advance_purchase, '', '', this.state.lowest_price_sea, this.state.lowest_price_pdx, this.state.lowest_price_bay, this.state.lowest_price_la, this.state.lowest_price_no_pdc);\n\n    saleDetailsHeaders.push(temp_array);\n\n    console.log(\"CSV SALE DETAILS: \"+JSON.stringify(saleDetailsHeaders));\n\n  }\n\n\n\n  changeHiddenSheet = (e) => {\n    this.setState({\n      hidden_sheet: e.target.value\n    })\n  }\n\n\n\n\n\n\n  createMyXml(combined_array, exceptions_array, exception_test, club49deals){\n\n\n      //Create CSV File from Data\n      this.generateMySaleFaresCSV(this.state.all_my_fares);\n      this.generateMySaleDetailsCSV();\n      //Create CSV File from Data\n      console.log(this.state);\n\n\n    //CLUB 49 DEALS\n  if(exception_test === false && club49deals === true){\n      let what_combined_fares_to_make_xml_for = combined_array;\n\n\n      let array_counter_upper = 0;\n      let array_counter_lower = 0;\n\n      what_combined_fares_to_make_xml_for.map((myitem) => {\n        if(myitem[\"group\"] ===\"ALASKA_ALASKA\"){\n          myitem[\"upper_lower\"].map((myitem2) => {\n            array_counter_upper++;\n          });\n        }else{\n          myitem[\"upper_lower\"].map((myitem2) => {\n            array_counter_lower++;\n          });\n        }\n      });\n\n      //console.log(\"Length of CLUB49: \"+array_counter);\n\n      let doc = builder.create('FlightDeals', { encoding: 'UTF-8'})\n      .att('xmlns:ss', 'urn:schemas-microsoft-com:office:spreadsheet')\n      doc.com(getMyMonth(this.state.sale_start_date)+'/'+getMyDay(this.state.sale_start_date)+' CLUB 49 - Updated at '+getMyMonth(new Date())+'/'+getMyDay(new Date())+'/'+getMyYear(new Date())+' '+getMyHour(new Date())+':'+getMyMinute(new Date())+' '+getMyTimeOfDay(new Date())+' by PRODUCER_NAME');\n\n\n      what_combined_fares_to_make_xml_for.map((item) => {\n\n        let start_date = '';\n        let end_date = '';\n        let travel_start = null;\n        let travel_end = null;\n        let days_availability = '';\n\n\n        if(item[\"group\"] === \"ALASKA_ALASKA\"){\n          start_date = this.state.proposed_from_clu49_string;\n          end_date = this.state.proposed_to_clu49_string;\n          travel_start = this.state.travel_from_within_alaska;\n          travel_end = this.state.travel_by_within_alaska;\n          days_availability = this.state.days_availability_within_alaska;\n\n\n\n\n          doc.com(getMyMonth(this.state.sale_start_date)+'/'+getMyDay(this.state.sale_start_date)+' CLUB 49 -  UPPER: '+array_counter_upper+' Fares');\n          let deal_set = doc.ele('DealSet', {'from':this.state.sale_start_date_string+'T00:00:01', 'to':this.state.sale_end_date_string+'T23:59:59'})\n          .ele('DealInfo', {'code': 'CLUB_49_SALE', 'dealType':'Saver', 'url':''})\n            .ele('TravelDates', {'startdate':start_date+'T00:00:01', 'enddate':end_date+'T23:59:59'}).up()\n            .ele('DealTitle').up()\n            .ele('DealDescrip', '<![CDATA[Purchase by '+makeDateMonthInEnglish(this.state.sale_end_date)+' '+getMyDay(this.state.sale_end_date)+', '+getMyYear(this.state.sale_end_date)+'.]]>').up()\n            .ele('terms','<![CDATA[<strong>Fare Rules:</strong> Purchase by 11:59 pm (PT) on '+makeDateMonthInEnglish(this.state.sale_end_date)+' '+getMyDay(this.state.sale_end_date)+', '+getMyYear(this.state.sale_end_date)+', and at least '+this.state.advance_purchase+' prior to departure. Travel within Alaska is valid '+days_availability+' from '+makeDateMonthInEnglish(travel_start)+' '+getMyDay(travel_start)+', '+getMyYear(travel_start)+' - '+makeDateMonthInEnglish(travel_end)+' '+getMyDay(travel_end)+', '+getMyYear(travel_end)+'. Seats are limited and may not be available on all flights or all days. If nonstop service is offered during the advertised travel period, the advertised fare applies to the nonstop flights only. Bag fees <a href=\"#terms\">may apply</a> for <a href=\"/content/travel-info/baggage/checked-bags\">checked baggage</a>. See <a href=\"#terms\">bottom of page</a> for full terms and conditions.]]>').up()\n            .up()\n            let fares_layer = deal_set.ele('Fares');\n          item[\"upper_lower\"].map((item2) => {\n            fares_layer.ele('Row', {'fareType': 'Main'})\n            .ele('Cell','<Data>'+item2[\"origin_code\"]+'</Data>').up()\n            .ele('Cell','<Data>'+returnMyCityName(item2[\"origin_code\"])+'</Data>').up()\n            .ele('Cell','<Data>'+item2[\"destination_code\"]+'</Data>').up()\n            .ele('Cell','<Data>'+returnMyCityName(item2[\"destination_code\"])+'</Data>').up()\n            .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n          });\n\n\n        }else if(item[\"group\"] === \"FROM_ALASKA\"){\n          start_date = this.state.proposed_from_clu49_string;\n          end_date = this.state.proposed_to_clu49_string;\n          travel_start = this.state.travel_from_to_us;\n          travel_end = this.state.travel_by_to_us;\n          days_availability = this.state.days_availability_to_us;\n\n          doc.com(getMyMonth(this.state.sale_start_date)+'/'+getMyDay(this.state.sale_start_date)+' CLUB 49 -  LOWER: '+array_counter_lower+' Fares');\n          let deal_set = doc.ele('DealSet', {'from':this.state.sale_start_date_string+'T00:00:01', 'to':this.state.sale_end_date_string+'T23:59:59'})\n          .ele('DealInfo', {'code': 'CLUB_49_SALE', 'dealType':'Saver', 'url':''})\n            .ele('TravelDates', {'startdate':start_date+'T00:00:01', 'enddate':end_date+'T23:59:59'}).up()\n            .ele('DealTitle').up()\n            .ele('DealDescrip', '<![CDATA[Purchase by '+makeDateMonthInEnglish(this.state.sale_end_date)+' '+getMyDay(this.state.sale_end_date)+', '+getMyYear(this.state.sale_end_date)+'.]]>').up()\n            .ele('terms','<![CDATA[<strong>Fare Rules:</strong> Purchase by 11:59 pm (PT) on '+makeDateMonthInEnglish(this.state.sale_end_date)+' '+getMyDay(this.state.sale_end_date)+', '+getMyYear(this.state.sale_end_date)+', and at least '+this.state.advance_purchase+' prior to departure. Travel to the US is valid '+days_availability+' from '+makeDateMonthInEnglish(travel_start)+' '+getMyDay(travel_start)+', '+getMyYear(travel_start)+' - '+makeDateMonthInEnglish(travel_end)+' '+getMyDay(travel_end)+', '+getMyYear(travel_end)+'. Bag fees <a href=\"#terms\">may apply</a> for <a href=\"/content/travel-info/baggage/checked-bags\">checked baggage</a>. See <a href=\"#terms\">bottom of page</a> for full terms and conditions.]]>').up()\n            .up()\n            let fares_layer = deal_set.ele('Fares');\n          item[\"upper_lower\"].map((item2) => {\n            fares_layer.ele('Row', {'fareType': 'Main'})\n            .ele('Cell','<Data>'+item2[\"origin_code\"]+'</Data>').up()\n            .ele('Cell','<Data>'+returnMyCityName(item2[\"origin_code\"])+'</Data>').up()\n            .ele('Cell','<Data>'+item2[\"destination_code\"]+'</Data>').up()\n            .ele('Cell','<Data>'+returnMyCityName(item2[\"destination_code\"])+'</Data>').up()\n            .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n          });\n\n        }else if(item[\"group\"] === \"ALASKA_HAWAII\"){\n          start_date = this.state.proposed_from_clu49_string;\n          end_date = this.state.proposed_to_clu49_string;\n          travel_start = this.state.travel_from_to_us;\n          travel_end = this.state.travel_by_to_us;\n          days_availability = this.state.days_availability_hawaii;\n\n          doc.com(getMyMonth(this.state.sale_start_date)+'/'+getMyDay(this.state.sale_start_date)+' CLUB 49 -  LOWER: '+array_counter_lower+' Fares');\n          let deal_set = doc.ele('DealSet', {'from':this.state.sale_start_date_string+'T00:00:01', 'to':this.state.sale_end_date_string+'T23:59:59'})\n          .ele('DealInfo', {'code': 'CLUB_49_SALE', 'dealType':'Saver', 'url':''})\n            .ele('TravelDates', {'startdate':start_date+'T00:00:01', 'enddate':end_date+'T23:59:59'}).up()\n            .ele('DealTitle').up()\n            .ele('DealDescrip', '<![CDATA[Purchase by '+makeDateMonthInEnglish(this.state.sale_end_date)+' '+getMyDay(this.state.sale_end_date)+', '+getMyYear(this.state.sale_end_date)+'.]]>').up()\n            .ele('terms','<![CDATA[<strong>Fare Rules:</strong> Purchase by 11:59 pm (PT) on '+makeDateMonthInEnglish(this.state.sale_end_date)+' '+getMyDay(this.state.sale_end_date)+', '+getMyYear(this.state.sale_end_date)+', and at least '+this.state.advance_purchase+' prior to departure. Travel to Hawaii is valid '+days_availability+' from '+makeDateMonthInEnglish(travel_start)+' '+getMyDay(travel_start)+', '+getMyYear(travel_start)+' - '+makeDateMonthInEnglish(travel_end)+' '+getMyDay(travel_end)+', '+getMyYear(travel_end)+'. Bag fees <a href=\"#terms\">may apply</a> for <a href=\"/content/travel-info/baggage/checked-bags\">checked baggage</a>. See <a href=\"#terms\">bottom of page</a> for full terms and conditions.]]>').up()\n            .up()\n            let fares_layer = deal_set.ele('Fares');\n          item[\"upper_lower\"].map((item2) => {\n            fares_layer.ele('Row', {'fareType': 'Main'})\n            .ele('Cell','<Data>'+item2[\"origin_code\"]+'</Data>').up()\n            .ele('Cell','<Data>'+returnMyCityName(item2[\"origin_code\"])+'</Data>').up()\n            .ele('Cell','<Data>'+item2[\"destination_code\"]+'</Data>').up()\n            .ele('Cell','<Data>'+returnMyCityName(item2[\"destination_code\"])+'</Data>').up()\n            .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n          });\n\n\n        }else{\n\n        }\n\n\n      });\n\n      let element = doc.toString({pretty: true});\n      element = element.replace(/&lt;/g, '<');\n      element = element.replace(/&gt;/g, '>');\n\n      this.setState({\n        xmloutput: element\n      });\n\n\n\n  //NORMAL FLIGHT DEALS WITH SAVER SAVER FARES\n  }else if(exception_test === false && club49deals === false){\n\n\n\n      let what_combined_fares_to_make_xml_for = combined_array;\n      let what_exception_fares_to_make_xml_for = exceptions_array;\n\n\n      let doc = builder.create('FlightDeals', { encoding: 'UTF-8'})\n      .att('xmlns:ss', 'urn:schemas-microsoft-com:office:spreadsheet')\n\n      if(this.state.selectedOption === 'Mileage'){\n        doc.com(getMyMonth(this.state.sale_start_date)+'/'+getMyDay(this.state.sale_start_date)+' AWARD SALE - Updated at '+getMyMonth(new Date())+'/'+getMyDay(new Date())+'/'+getMyYear(new Date())+' '+getMyHour(new Date())+':'+getMyMinute(new Date())+' '+getMyTimeOfDay(new Date())+' by PRODUCER_NAME');\n      }else{\n        doc.com(getMyMonth(this.state.sale_start_date)+'/'+getMyDay(this.state.sale_start_date)+' SALE - Updated at '+getMyMonth(new Date())+'/'+getMyDay(new Date())+'/'+getMyYear(new Date())+' '+getMyHour(new Date())+':'+getMyMinute(new Date())+' '+getMyTimeOfDay(new Date())+' by PRODUCER_NAME');\n      }\n\n\n      what_combined_fares_to_make_xml_for.map((item) => {\n\n        let start_date = '';\n        let end_date = '';\n        let travel_start = null;\n        let travel_end = null;\n        let days_availability = '';\n        let black_out_date_sentence = '';\n\n        if(item[\"group\"] === \"ALASKA_HAWAII\"){\n          start_date = this.state.proposed_start_hawaii_string;\n          end_date = this.state.proposed_end_hawaii_string;\n          travel_start = this.state.travel_start_alaska_to_from_hawaii;\n          travel_end = this.state.travel_end_alaska_to_from_hawaii;\n          days_availability = this.state.days_availability_hawaii;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_alaska_to_from_hawaii !== null && this.state.blackout_end_alaska_to_from_hawaii !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_alaska_to_from_hawaii)+' '+getMyDay(this.state.blackout_start_alaska_to_from_hawaii)+', '+getMyYear(this.state.blackout_start_alaska_to_from_hawaii)+' to '+makeDateMonthInEnglish(this.state.blackout_end_alaska_to_from_hawaii)+' '+getMyDay(this.state.blackout_end_alaska_to_from_hawaii)+', '+getMyYear(this.state.blackout_end_alaska_to_from_hawaii)+'. '\n            }\n        }else if(item[\"group\"] === \"ALASKA_ALASKA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"FROM_ALASKA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"TO_ALASKA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"TO_HAWAII\" || item[\"group\"] === \"FROM_HAWAII\"){\n          start_date = this.state.proposed_start_hawaii_string;\n          end_date = this.state.proposed_end_hawaii_string;\n          travel_start = this.state.travel_start_hawaii;\n          travel_end = this.state.travel_end_hawaii;\n          days_availability = this.state.days_availability_hawaii;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_from_hawaii !== null && this.state.blackout_end_from_hawaii !== null && item[\"group\"] === \"FROM_HAWAII\"){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_from_hawaii)+' '+getMyDay(this.state.blackout_start_from_hawaii)+', '+getMyYear(this.state.blackout_start_from_hawaii)+' to '+makeDateMonthInEnglish(this.state.blackout_end_from_hawaii)+' '+getMyDay(this.state.blackout_end_from_hawaii)+', '+getMyYear(this.state.blackout_end_from_hawaii)+'. '\n            }\n            if(this.state.blackout_start_to_hawaii !== null && this.state.blackout_start_to_hawaii !== null && item[\"group\"] === \"TO_HAWAII\"){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_to_hawaii)+' '+getMyDay(this.state.blackout_start_to_hawaii)+', '+getMyYear(this.state.blackout_start_to_hawaii)+' to '+makeDateMonthInEnglish(this.state.blackout_end_to_hawaii)+' '+getMyDay(this.state.blackout_end_to_hawaii)+', '+getMyYear(this.state.blackout_end_to_hawaii)+'. '\n            }\n        }else if(item[\"group\"] === \"TO_FLORIDA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_florida;\n          travel_end = this.state.travel_end_florida;\n          days_availability = this.state.days_availability_to_florida;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"FROM_FLORIDA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_florida;\n          travel_end = this.state.travel_end_florida;\n          days_availability = this.state.days_availability_from_florida;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"MEXICO\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_mexico;\n          travel_end = this.state.travel_end_mexico;\n          days_availability = this.state.days_availability_mexico;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_mexico !== null && this.state.blackout_start_mexico !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_mexico)+' '+getMyDay(this.state.blackout_start_mexico)+', '+getMyYear(this.state.blackout_start_mexico)+' to '+makeDateMonthInEnglish(this.state.blackout_end_mexico)+' '+getMyDay(this.state.blackout_end_mexico)+', '+getMyYear(this.state.blackout_end_mexico)+'. '\n            }\n        }else if(item[\"group\"] === \"COSTA_RICA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_costa_rica;\n          travel_end = this.state.travel_end_costa_rica;\n          days_availability = this.state.days_availability_costa_rica;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_costa_rica !== null && this.state.blackout_start_costa_rica !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_costa_rica)+' '+getMyDay(this.state.blackout_start_costa_rica)+', '+getMyYear(this.state.blackout_start_costa_rica)+' to '+makeDateMonthInEnglish(this.state.blackout_end_costa_rica)+' '+getMyDay(this.state.blackout_end_costa_rica)+', '+getMyYear(this.state.blackout_end_costa_rica)+'. '\n            }\n        }else if(item[\"group\"] === \"PAE\"){\n          start_date = this.state.proposed_start_pae_string;\n          end_date = this.state.proposed_end_pae_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"OTHER_MARKET\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else{\n\n        }\n\n        let service_begin_sentence = '';\n        let service_ends_sentence = '';\n        let d_type = '';\n        let f_type = '';\n\n          if(this.state.selectedOption === 'Mileage'){\n            d_type = 'MileagePlan';\n            f_type = 'Miles'\n          }else{\n            d_type = 'Saver';\n          }\n\n        //console.log(item);\n        doc.com(getMyMonth(this.state.sale_start_date)+'/'+getMyDay(this.state.sale_start_date)+' '+item[\"name\"]);\n        let deal_set = doc.ele('DealSet', {'from':this.state.sale_start_date_string+'T00:00:01', 'to':this.state.sale_end_date_string+'T23:59:59'})\n          .ele('DealInfo', {'code': getMyYear(this.state.sale_start_date)+''+getMyMonth(this.state.sale_start_date)+''+getMyDay(this.state.sale_start_date)+'_SALE-'+item[\"name\"], 'dealType': d_type, 'url':''})\n          .ele('TravelDates', {'startdate':start_date+'T00:00:01', 'enddate':end_date+'T23:59:59'}).up()\n          .ele('DealTitle').up()\n          .ele('DealDescrip', '<![CDATA[Purchase by '+makeDateMonthInEnglish(this.state.sale_end_date)+' '+getMyDay(this.state.sale_end_date)+', '+getMyYear(this.state.sale_end_date)+'.]]>').up()\n          .ele('terms','<![CDATA[<strong>Fare Rules:</strong> Purchase by 11:59 pm (PT) on '+makeDateMonthInEnglish(this.state.sale_end_date)+' '+getMyDay(this.state.sale_end_date)+', '+getMyYear(this.state.sale_end_date)+', and at least '+this.state.advance_purchase+' prior to departure. Travel from '+item[\"origin_city\"]+' ('+item[\"origin_code\"]+') to '+item[\"destination_city\"]+' ('+item[\"destination_code\"]+') is valid '+days_availability+' from '+makeDateMonthInEnglish(travel_start)+' '+getMyDay(travel_start)+', '+getMyYear(travel_start)+' - '+makeDateMonthInEnglish(travel_end)+' '+getMyDay(travel_end)+', '+getMyYear(travel_end)+'. '+service_begin_sentence+''+service_ends_sentence+''+black_out_date_sentence+'Seats are limited and may not be available on all flights or all days. If nonstop service is offered during the advertised travel period, the advertised fare applies to the nonstop flights only. Bag fees <a href=\"#terms\">may apply</a> for <a href=\"/content/travel-info/baggage/checked-bags\">checked baggage</a>. See <a href=\"#terms\">bottom of page</a> for full terms and conditions.]]>').up()\n          .up()\n          let fares_layer = deal_set.ele('Fares');\n\n          if(f_type === 'Miles'){\n            item[\"price_types\"].map((item2) => {\n              if(item[\"default\"]===true){\n                fares_layer.ele('Row', {'fareType': f_type, 'showAsDefault' : 'true'})\n                .ele('Cell','<Data>'+item[\"origin_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"origin_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item[\"destination_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"destination_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"taxes\"]+'</Data>').up()\n              }else{\n                fares_layer.ele('Row', {'fareType': f_type})\n                .ele('Cell','<Data>'+item[\"origin_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"origin_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item[\"destination_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"destination_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"taxes\"]+'</Data>').up()\n              }\n            });\n          }else{\n            item[\"price_types\"].map((item2) => {\n              if(item[\"default\"]===true && item2['fare_type'] === \"Saver\"){\n                fares_layer.ele('Row', {'fareType': item2['fare_type'], 'showAsDefault' : 'true'})\n                .ele('Cell','<Data>'+item[\"origin_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"origin_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item[\"destination_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"destination_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n              }else{\n                fares_layer.ele('Row', {'fareType': item2['fare_type']})\n                .ele('Cell','<Data>'+item[\"origin_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"origin_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item[\"destination_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"destination_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n              }\n            });\n          }\n\n\n\n      });\n\n      let element = doc.toString({pretty: true});\n      element = element.replace(/&lt;/g, '<');\n      element = element.replace(/&gt;/g, '>');\n\n      this.setState({\n        xmloutput: element\n      });\n\n\n  }else{\n\n      let what_combined_fares_to_make_xml_for = combined_array;\n      let what_exception_fares_to_make_xml_for = exceptions_array;\n\n\n      let doc = builder.create('FlightDeals', { encoding: 'UTF-8'})\n      .att('xmlns:ss', 'urn:schemas-microsoft-com:office:spreadsheet')\n      if(this.state.selectedOption === 'Mileage'){\n        doc.com(getMyMonth(this.state.sale_start_date)+'/'+getMyDay(this.state.sale_start_date)+' AWARD SALE - Updated at '+getMyMonth(new Date())+'/'+getMyDay(new Date())+'/'+getMyYear(new Date())+' '+getMyHour(new Date())+':'+getMyMinute(new Date())+' '+getMyTimeOfDay(new Date())+' by PRODUCER_NAME');\n      }else{\n        doc.com(getMyMonth(this.state.sale_start_date)+'/'+getMyDay(this.state.sale_start_date)+' SALE - Updated at '+getMyMonth(new Date())+'/'+getMyDay(new Date())+'/'+getMyYear(new Date())+' '+getMyHour(new Date())+':'+getMyMinute(new Date())+' '+getMyTimeOfDay(new Date())+' by PRODUCER_NAME');\n      }\n\n\n\n      what_combined_fares_to_make_xml_for.map((item) => {\n\n        let start_date = '';\n        let end_date = '';\n        let travel_start = null;\n        let travel_end = null;\n        let days_availability = '';\n        let black_out_date_sentence = '';\n\n        if(item[\"group\"] === \"ALASKA_HAWAII\"){\n          start_date = this.state.proposed_start_hawaii_string;\n          end_date = this.state.proposed_end_hawaii_string;\n          travel_start = this.state.travel_start_alaska_to_from_hawaii;\n          travel_end = this.state.travel_end_alaska_to_from_hawaii;\n          days_availability = this.state.days_availability_hawaii;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_alaska_to_from_hawaii !== null && this.state.blackout_end_alaska_to_from_hawaii !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_alaska_to_from_hawaii)+' '+getMyDay(this.state.blackout_start_alaska_to_from_hawaii)+', '+getMyYear(this.state.blackout_start_alaska_to_from_hawaii)+' to '+makeDateMonthInEnglish(this.state.blackout_end_alaska_to_from_hawaii)+' '+getMyDay(this.state.blackout_end_alaska_to_from_hawaii)+', '+getMyYear(this.state.blackout_end_alaska_to_from_hawaii)+'. '\n            }\n        }else if(item[\"group\"] === \"ALASKA_ALASKA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"FROM_ALASKA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"TO_ALASKA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"TO_HAWAII\" || item[\"group\"] === \"FROM_HAWAII\"){\n          start_date = this.state.proposed_start_hawaii_string;\n          end_date = this.state.proposed_end_hawaii_string;\n          travel_start = this.state.travel_start_hawaii;\n          travel_end = this.state.travel_end_hawaii;\n          days_availability = this.state.days_availability_hawaii;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_from_hawaii !== null && this.state.blackout_end_from_hawaii !== null && item[\"group\"] === \"FROM_HAWAII\"){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_from_hawaii)+' '+getMyDay(this.state.blackout_start_from_hawaii)+', '+getMyYear(this.state.blackout_start_from_hawaii)+' to '+makeDateMonthInEnglish(this.state.blackout_end_from_hawaii)+' '+getMyDay(this.state.blackout_end_from_hawaii)+', '+getMyYear(this.state.blackout_end_from_hawaii)+'. '\n            }\n            if(this.state.blackout_start_to_hawaii !== null && this.state.blackout_start_to_hawaii !== null && item[\"group\"] === \"TO_HAWAII\"){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_to_hawaii)+' '+getMyDay(this.state.blackout_start_to_hawaii)+', '+getMyYear(this.state.blackout_start_to_hawaii)+' to '+makeDateMonthInEnglish(this.state.blackout_end_to_hawaii)+' '+getMyDay(this.state.blackout_end_to_hawaii)+', '+getMyYear(this.state.blackout_end_to_hawaii)+'. '\n            }\n        }else if(item[\"group\"] === \"TO_FLORIDA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_florida;\n          travel_end = this.state.travel_end_florida;\n          days_availability = this.state.days_availability_to_florida;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"FROM_FLORIDA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_florida;\n          travel_end = this.state.travel_end_florida;\n          days_availability = this.state.days_availability_from_florida;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"MEXICO\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_mexico;\n          travel_end = this.state.travel_end_mexico;\n          days_availability = this.state.days_availability_mexico;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_mexico !== null && this.state.blackout_start_mexico !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_mexico)+' '+getMyDay(this.state.blackout_start_mexico)+', '+getMyYear(this.state.blackout_start_mexico)+' to '+makeDateMonthInEnglish(this.state.blackout_end_mexico)+' '+getMyDay(this.state.blackout_end_mexico)+', '+getMyYear(this.state.blackout_end_mexico)+'. '\n            }\n        }else if(item[\"group\"] === \"COSTA_RICA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_costa_rica;\n          travel_end = this.state.travel_end_costa_rica;\n          days_availability = this.state.days_availability_costa_rica;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_costa_rica !== null && this.state.blackout_start_costa_rica !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_costa_rica)+' '+getMyDay(this.state.blackout_start_costa_rica)+', '+getMyYear(this.state.blackout_start_costa_rica)+' to '+makeDateMonthInEnglish(this.state.blackout_end_costa_rica)+' '+getMyDay(this.state.blackout_end_costa_rica)+', '+getMyYear(this.state.blackout_end_costa_rica)+'. '\n            }\n        }else if(item[\"group\"] === \"PAE\"){\n          start_date = this.state.proposed_start_pae_string;\n          end_date = this.state.proposed_end_pae_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"OTHER_MARKET\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else{\n\n        }\n\n\n        let service_begin_sentence = '';\n        let service_ends_sentence = '';\n        let d_type = '';\n        let f_type = '';\n\n          if(this.state.selectedOption === 'Mileage'){\n            d_type = 'MileagePlan';\n            f_type = 'Miles'\n          }else{\n            d_type = 'Saver';\n          }\n\n        //console.log(item);\n        doc.com(getMyMonth(this.state.sale_start_date)+'/'+getMyDay(this.state.sale_start_date)+' '+item[\"name\"]);\n        let deal_set = doc.ele('DealSet', {'from':this.state.sale_start_date_string+'T00:00:01', 'to':this.state.sale_end_date_string+'T23:59:59'})\n        .ele('DealInfo', {'code': getMyYear(this.state.sale_start_date)+''+getMyMonth(this.state.sale_start_date)+''+getMyDay(this.state.sale_start_date)+'_SALE-'+item[\"name\"], 'dealType':d_type, 'url':''})\n          .ele('TravelDates', {'startdate':start_date+'T00:00:01', 'enddate':end_date+'T23:59:59'}).up()\n          .ele('DealTitle').up()\n          .ele('DealDescrip', '<![CDATA[Purchase by '+makeDateMonthInEnglish(this.state.sale_end_date)+' '+getMyDay(this.state.sale_end_date)+', '+getMyYear(this.state.sale_end_date)+'.]]>').up()\n          .ele('terms','<![CDATA[<strong>Fare Rules:</strong> Purchase by 11:59 pm (PT) on '+makeDateMonthInEnglish(this.state.sale_end_date)+' '+getMyDay(this.state.sale_end_date)+', '+getMyYear(this.state.sale_end_date)+', and at least '+this.state.advance_purchase+' prior to departure. Travel from '+item[\"origin_city\"]+' ('+item[\"origin_code\"]+') to '+item[\"destination_city\"]+' ('+item[\"destination_code\"]+') is valid '+days_availability+' from '+makeDateMonthInEnglish(travel_start)+' '+getMyDay(travel_start)+', '+getMyYear(travel_start)+' - '+makeDateMonthInEnglish(travel_end)+' '+getMyDay(travel_end)+', '+getMyYear(travel_end)+'. '+service_begin_sentence+''+service_ends_sentence+''+black_out_date_sentence+'Seats are limited and may not be available on all flights or all days. If nonstop service is offered during the advertised travel period, the advertised fare applies to the nonstop flights only. Bag fees <a href=\"#terms\">may apply</a> for <a href=\"/content/travel-info/baggage/checked-bags\">checked baggage</a>. See <a href=\"#terms\">bottom of page</a> for full terms and conditions.]]>').up()\n          .up()\n          let fares_layer = deal_set.ele('Fares');\n\n          if(f_type === 'Miles'){\n            item[\"price_types\"].map((item2) => {\n              if(item[\"default\"]===true){\n                fares_layer.ele('Row', {'fareType': f_type, 'showAsDefault' : 'true'})\n                .ele('Cell','<Data>'+item[\"origin_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"origin_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item[\"destination_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"destination_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"taxes\"]+'</Data>').up()\n              }else{\n                fares_layer.ele('Row', {'fareType': f_type})\n                .ele('Cell','<Data>'+item[\"origin_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"origin_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item[\"destination_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"destination_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"taxes\"]+'</Data>').up()\n              }\n            });\n          }else{\n            item[\"price_types\"].map((item2) => {\n              if(item[\"default\"]===true && item2['fare_type'] === \"Saver\"){\n                fares_layer.ele('Row', {'fareType': item2['fare_type'], 'showAsDefault' : 'true'})\n                .ele('Cell','<Data>'+item[\"origin_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"origin_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item[\"destination_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"destination_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n              }else{\n                fares_layer.ele('Row', {'fareType': item2['fare_type']})\n                .ele('Cell','<Data>'+item[\"origin_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"origin_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item[\"destination_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"destination_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n              }\n            });\n          }\n\n\n\n\n      });\n\n      what_exception_fares_to_make_xml_for.map((item) => {\n\n        let start_date = '';\n        let end_date = '';\n        let travel_start = null;\n        let travel_end = null;\n        let days_availability = '';\n        let black_out_date_sentence = '';\n\n        if(item[\"group\"] === \"ALASKA_HAWAII\"){\n          start_date = this.state.proposed_start_hawaii_string;\n          end_date = this.state.proposed_end_hawaii_string;\n          travel_start = this.state.travel_start_alaska_to_from_hawaii;\n          travel_end = this.state.travel_end_alaska_to_from_hawaii;\n          days_availability = this.state.days_availability_hawaii;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_alaska_to_from_hawaii !== null && this.state.blackout_end_alaska_to_from_hawaii !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_alaska_to_from_hawaii)+' '+getMyDay(this.state.blackout_start_alaska_to_from_hawaii)+', '+getMyYear(this.state.blackout_start_alaska_to_from_hawaii)+' to '+makeDateMonthInEnglish(this.state.blackout_end_alaska_to_from_hawaii)+' '+getMyDay(this.state.blackout_end_alaska_to_from_hawaii)+', '+getMyYear(this.state.blackout_end_alaska_to_from_hawaii)+'. '\n            }\n        }else if(item[\"group\"] === \"ALASKA_ALASKA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"FROM_ALASKA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"TO_ALASKA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"TO_HAWAII\" || item[\"group\"] === \"FROM_HAWAII\"){\n          start_date = this.state.proposed_start_hawaii_string;\n          end_date = this.state.proposed_end_hawaii_string;\n          travel_start = this.state.travel_start_hawaii;\n          travel_end = this.state.travel_end_hawaii;\n          days_availability = this.state.days_availability_hawaii;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_from_hawaii !== null && this.state.blackout_end_from_hawaii !== null && item[\"group\"] === \"FROM_HAWAII\"){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_from_hawaii)+' '+getMyDay(this.state.blackout_start_from_hawaii)+', '+getMyYear(this.state.blackout_start_from_hawaii)+' to '+makeDateMonthInEnglish(this.state.blackout_end_from_hawaii)+' '+getMyDay(this.state.blackout_end_from_hawaii)+', '+getMyYear(this.state.blackout_end_from_hawaii)+'. '\n            }\n            if(this.state.blackout_start_to_hawaii !== null && this.state.blackout_start_to_hawaii !== null && item[\"group\"] === \"TO_HAWAII\"){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_to_hawaii)+' '+getMyDay(this.state.blackout_start_to_hawaii)+', '+getMyYear(this.state.blackout_start_to_hawaii)+' to '+makeDateMonthInEnglish(this.state.blackout_end_to_hawaii)+' '+getMyDay(this.state.blackout_end_to_hawaii)+', '+getMyYear(this.state.blackout_end_to_hawaii)+'. '\n            }\n        }else if(item[\"group\"] === \"TO_FLORIDA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_florida;\n          travel_end = this.state.travel_end_florida;\n          days_availability = this.state.days_availability_to_florida;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"FROM_FLORIDA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_florida;\n          travel_end = this.state.travel_end_florida;\n          days_availability = this.state.days_availability_from_florida;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"MEXICO\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_mexico;\n          travel_end = this.state.travel_end_mexico;\n          days_availability = this.state.days_availability_mexico;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_mexico !== null && this.state.blackout_start_mexico !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_mexico)+' '+getMyDay(this.state.blackout_start_mexico)+', '+getMyYear(this.state.blackout_start_mexico)+' to '+makeDateMonthInEnglish(this.state.blackout_end_mexico)+' '+getMyDay(this.state.blackout_end_mexico)+', '+getMyYear(this.state.blackout_end_mexico)+'. '\n            }\n        }else if(item[\"group\"] === \"COSTA_RICA\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_costa_rica;\n          travel_end = this.state.travel_end_costa_rica;\n          days_availability = this.state.days_availability_costa_rica;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_costa_rica !== null && this.state.blackout_start_costa_rica !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_costa_rica)+' '+getMyDay(this.state.blackout_start_costa_rica)+', '+getMyYear(this.state.blackout_start_costa_rica)+' to '+makeDateMonthInEnglish(this.state.blackout_end_costa_rica)+' '+getMyDay(this.state.blackout_end_costa_rica)+', '+getMyYear(this.state.blackout_end_costa_rica)+'. '\n            }\n        }else if(item[\"group\"] === \"PAE\"){\n          start_date = this.state.proposed_start_pae_string;\n          end_date = this.state.proposed_end_pae_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else if(item[\"group\"] === \"OTHER_MARKET\"){\n          start_date = this.state.proposed_start_others_string;\n          end_date = this.state.proposed_end_others_string;\n          travel_start = this.state.travel_start_others;\n          travel_end = this.state.travel_end_others;\n          days_availability = this.state.days_availability_others;\n            // Pulling BLACKOUT DATES and FORMING the sentence\n            if(this.state.blackout_start_others !== null && this.state.blackout_start_others !== null){\n              black_out_date_sentence = 'Blackout dates are from '+makeDateMonthInEnglish(this.state.blackout_start_others)+' '+getMyDay(this.state.blackout_start_others)+', '+getMyYear(this.state.blackout_start_others)+' to '+makeDateMonthInEnglish(this.state.blackout_end_others)+' '+getMyDay(this.state.blackout_end_others)+', '+getMyYear(this.state.blackout_end_others)+'. '\n            }\n        }else{\n\n        }\n\n\n        /*SPECIFIC TO EXCEPTIONS ONLY*/\n        if(item[\"days_available\"] !== ''){\n          days_availability = item[\"days_available\"];\n        }\n        let service_begin_sentence = '';\n        if(item[\"service_begins\"] !== null){\n          service_begin_sentence = 'Service begins '+ makeDateMonthInEnglish(item[\"service_begins\"])+' '+getMyDay(item[\"service_begins\"])+', '+getMyYear(item[\"service_begins\"])+'. ';\n        }\n        let service_ends_sentence = '';\n        if(item[\"service_ends\"] !== null){\n          service_ends_sentence = 'Service ends '+ makeDateMonthInEnglish(item[\"service_ends\"])+' '+getMyDay(item[\"service_ends\"])+', '+getMyYear(item[\"service_ends\"])+'. ';\n        }\n        /*SPECIFIC TO EXCEPTIONS ONLY*/\n\n        let d_type = '';\n        let f_type = '';\n\n        if(this.state.selectedOption === 'Mileage'){\n          d_type = 'MileagePlan';\n          f_type = 'Miles';\n        }else{\n          d_type = 'Saver';\n        }\n\n        //console.log(item);\n        doc.com(getMyMonth(this.state.sale_start_date)+'/'+getMyDay(this.state.sale_start_date)+' '+item[\"name\"]+' EXCEPTION');\n        let deal_set = doc.ele('DealSet', {'from':this.state.sale_start_date_string+'T00:00:01', 'to':this.state.sale_end_date_string+'T23:59:59'})\n        .ele('DealInfo', {'code': getMyYear(this.state.sale_start_date)+''+getMyMonth(this.state.sale_start_date)+''+getMyDay(this.state.sale_start_date)+'_SALE-'+item[\"name\"], 'dealType':d_type, 'url':''})\n          .ele('TravelDates', {'startdate':start_date+'T00:00:01', 'enddate':end_date+'T23:59:59'}).up()\n          .ele('DealTitle').up()\n          .ele('DealDescrip', '<![CDATA[Purchase by '+makeDateMonthInEnglish(this.state.sale_end_date)+' '+getMyDay(this.state.sale_end_date)+', '+getMyYear(this.state.sale_end_date)+'.]]>').up()\n          .ele('terms','<![CDATA[<strong>Fare Rules:</strong> Purchase by 11:59 pm (PT) on '+makeDateMonthInEnglish(this.state.sale_end_date)+' '+getMyDay(this.state.sale_end_date)+', '+getMyYear(this.state.sale_end_date)+', and at least '+this.state.advance_purchase+' prior to departure. Travel from '+item[\"origin_city\"]+' ('+item[\"origin_code\"]+') to '+item[\"destination_city\"]+' ('+item[\"destination_code\"]+') is valid '+days_availability+' from '+makeDateMonthInEnglish(travel_start)+' '+getMyDay(travel_start)+', '+getMyYear(travel_start)+' - '+makeDateMonthInEnglish(travel_end)+' '+getMyDay(travel_end)+', '+getMyYear(travel_end)+'. '+service_begin_sentence+''+service_ends_sentence+''+black_out_date_sentence+'Seats are limited and may not be available on all flights or all days. If nonstop service is offered during the advertised travel period, the advertised fare applies to the nonstop flights only. Bag fees <a href=\"#terms\">may apply</a> for <a href=\"/content/travel-info/baggage/checked-bags\">checked baggage</a>. See <a href=\"#terms\">bottom of page</a> for full terms and conditions.]]>').up()\n          .up()\n          let fares_layer = deal_set.ele('Fares');\n          if(f_type === 'Miles'){\n            item[\"price_types\"].map((item2) => {\n              if(item[\"default\"]===true){\n                fares_layer.ele('Row', {'fareType': f_type, 'showAsDefault' : 'true'})\n                .ele('Cell','<Data>'+item[\"origin_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"origin_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item[\"destination_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"destination_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"taxes\"]+'</Data>').up()\n              }else{\n                fares_layer.ele('Row', {'fareType': f_type})\n                .ele('Cell','<Data>'+item[\"origin_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"origin_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item[\"destination_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"destination_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"taxes\"]+'</Data>').up()\n              }\n            });\n          }else{\n            item[\"price_types\"].map((item2) => {\n              if(item[\"default\"]===true && item2['fare_type'] === \"Saver\"){\n                fares_layer.ele('Row', {'fareType': item2['fare_type'], 'showAsDefault' : 'true'})\n                .ele('Cell','<Data>'+item[\"origin_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"origin_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item[\"destination_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"destination_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n              }else{\n                fares_layer.ele('Row', {'fareType': item2['fare_type']})\n                .ele('Cell','<Data>'+item[\"origin_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"origin_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item[\"destination_code\"]+'</Data>').up()\n                .ele('Cell','<Data>'+returnMyCityName(item[\"destination_code\"])+'</Data>').up()\n                .ele('Cell','<Data>'+item2[\"price\"]+'</Data>').up()\n              }\n            });\n          }\n\n\n      });\n\n\n      let element = doc.toString({pretty: true});\n      element = element.replace(/&lt;/g, '<');\n      element = element.replace(/&gt;/g, '>');\n\n      this.setState({\n        xmloutput: element\n      });\n\n    }\n\n\n\n  }\n\n\n\n  moveExceptionsOut(){\n\n    let newPulledExceptionFares = this.state.pulled_exception_fares.slice();\n    let array_all_combined_prices = [...this.state.combined_saver_and_main];\n    let newAllMyFares = this.state.combined_saver_and_main.slice();\n    let newAllMyExceptions = this.state.exceptions.slice();\n\n\n    console.log(this.state.exceptions.length);\n\n    if(this.state.exceptions.length <= 0){\n      this.createMyXml(this.state.combined_saver_and_main, null, false, false);\n    }else{\n\n      newAllMyFares.map((item1, index1) => {\n        newAllMyExceptions.map((item2, index2) => {\n\n          if(item1[\"origin_code\"] === item2[\"code_origin\"] && item1[\"destination_code\"] === item2[\"code_destination\"]){\n\n            let index = array_all_combined_prices.indexOf(item1);\n\n            if (index !== -1) {\n              //Removes this fare from all_my_fares\n              array_all_combined_prices.splice(index, 1);\n\n              newPulledExceptionFares.push({\n                ...item1,\n                days_available: item2[\"travel_valid\"],\n                service_begins: item2[\"service_begins\"],\n                service_ends: item2[\"service_ends\"],\n                service_start_string: item2[\"service_begins_string\"],\n                service_end_string: item2[\"service_end_string\"]\n              });\n\n              this.setState({\n                combined_saver_and_main: array_all_combined_prices,\n                pulled_exception_fares: newPulledExceptionFares\n              }, () => this.createMyXml(this.state.combined_saver_and_main, this.state.pulled_exception_fares, true));\n\n\n\n              this.createMyXml(this.state.combined_saver_and_main, this.state.pulled_exception_fares, true, false);\n\n              console.log(\"Fare Removed from Index: \"+index1);\n            }\n\n          }\n        });\n      });\n\n    }\n\n\n  }\n\n\n  verifyThatExceptionsIsNotEmpty(){\n\n    let newAllMyExceptions = this.state.exceptions.slice();\n    let array_all_exceptions = [...this.state.exceptions];\n\n    //console.log(newAllMyExceptions[0]);\n\n    newAllMyExceptions.map((theitem, myindex) => {\n      if(theitem[\"code_origin\"] === \"\"){\n        //if (myindex !== -1) {\n          array_all_exceptions.splice(myindex, 1);\n\n          this.setState({\n            exceptions: array_all_exceptions\n          }, () => this.moveExceptionsOut());\n        //}\n      }else{\n        this.moveExceptionsOut();\n      }\n    });\n\n\n  }\n\n\n\n\n  //FORM BUTTON CLICK HANDLER\n  createSaleDetails(e){\n    e.preventDefault();\n\n    if(this.state.club49_sheet === true){\n      this.createMyXml(this.state.combined_club_49, null, false, true);\n    }else{\n      this.verifyThatExceptionsIsNotEmpty();\n    }\n\n\n  }\n\n\n\n  // myFunction(xml) {\n  //   var xmlDoc = xml.responseXML;\n  //   var root = xmlDoc.documentElement;\n  //   var currNode = root.childNodes[1];\n  //   var removedNode = currNode.removeChild(currNode.childNodes[1]);\n  //   console.log(removedNode.nodeName);\n  // }\n\n\n  cleanFile = () => () => {\n\n\n    let array = [...this.state.xml_response];\n    let i = array.length;\n    let newCleanArray = [];\n\n    array.map((item, index) => {\n\n      let deal_set_code = item.children[0].attributes[\"code\"];\n      let exp_date = item.attributes[\"to\"];\n\n      exp_date = new Date(exp_date);\n      let right_now = new Date();\n\n        if(exp_date > right_now){\n         // array.splice(index, 1);\n          newCleanArray.push(item);\n        }else{\n          console.log(deal_set_code);\n          console.log(exp_date);\n        }\n    });\n\n    this.setState({\n      clean: newCleanArray\n    });\n\n\n    // let doc2 = builder.create('FlightDeals', { encoding: 'UTF-8'})\n    //   .att('xmlns:ss', 'urn:schemas-microsoft-com:office:spreadsheet')\n\n    // const clean_copy = this.state.clean.splice();\n    // const updatedItems = clean_copy.map((item) => {\n    //   doc2.ele(item)\n    // });\n\n    // //doc2.toString({pretty: true});\n\n    // let element2 = doc2.toString({pretty: true});\n\n    // this.setState({\n    //   clean: element2\n    // })\n\n    //console.log(this.state);\n  }\n\n\n\n  camelCaseCity = (cityname) => {\n    for(let i = 0; i < city_caps_conversion.length; i++){\n      let myitem = city_caps_conversion[i].AVFM_name;\n      let mycityname = city_caps_conversion[i].City_Name;\n      if(myitem === cityname){\n        return mycityname;\n      }\n    }\n  }\n\n\n\n\n\n\n  onFileChange(e, file) {\n\n    file = file || e.target.files[0];\n\n    let split_name = [];\n    let myfilename = file.name;\n    myfilename = myfilename.substring(0, myfilename.indexOf(\".\"));\n    if(myfilename.indexOf(\" \") > -1){\n      split_name[0] = myfilename.substring(myfilename.indexOf(\" \"), myfilename.length).trim();\n      split_name[1] = myfilename.substring(0, myfilename.indexOf(\" \"));\n\n    }else{\n      split_name[0] = myfilename;\n    }\n\n    // console.log(split_name);\n    this.setState({\n      file_name: split_name[0]\n    });\n\n\n\n    //Sheet 1 Looper\n    readXlsxFile(file, { sheet: 1 }).then((data) => {\n      //Loops through every row in the sheet\n\n      //CLUB 49 ONLY\n      let index_of_travel_from_to_us = null;\n      let index_of_travel_from_within_alaska = null;\n      let index_of_travel_by_to_us = null;\n      let index_of_travel_by_within_alaska = null;\n      //CLUB 49 ONLY\n\n      for(let index = 0; index < data.length; index++){\n\n        //console.log(data[index]);\n\n        //CLUB 49 ONLY\n        if(data[index][0] === 'Travel From:'){\n          index_of_travel_from_to_us  = index+1;\n          index_of_travel_from_within_alaska = index+1;\n\n          this.setState({\n            club49_sheet: true\n          });\n        }\n\n        if(data[index][0] === 'Within Alaska'){\n          this.setState({\n            club49_sheet: true\n          });\n        }\n\n\n        if(this.state.club49_sheet === true && data[index][0] === 'Advance Purchase:'){\n          index_of_travel_by_to_us  = index-2;\n          index_of_travel_by_within_alaska = index-1;\n        }\n\n        //CLUB 49 ONLY\n\n\n\n        // SALE_TYPE (Col 7)\n        if(data[index][0] === 'OW SALE:' && data[index][1] !== null){\n          this.setState({\n            sale_type: data[index][1]\n          });\n        }else{\n          this.setState({\n            sale_type: this.state.file_name\n          });\n        }\n\n\n        // SALE_OBJECTIVE (Col 8)\n        if(data[index][0] === 'Sale Objective:' && data[index][1] !== null){\n          this.setState({\n            sale_objective: data[index][1]\n          });\n        }else{\n          this.setState({\n            sale_objective: this.state.file_name\n          });\n        }\n\n\n        //console.log(data[index]);\n        //Get Sale Start Date from Sheet 1 and set state for sale_start_date variables\n        if(data[index][0] === 'Sale Start Date:' && data[index][1] !== null){\n          //console.log(data[index]);\n          let temp_string = moment(data[index][1]).format('YYYY-MM-DD');\n          this.setState({\n            sale_start_date: data[index][1],\n            sale_start_date_string: temp_string\n          });\n        }\n        //Get Purchase By date from Sheet 1 and set state for sale_end_date variables\n        if(data[index][0] === 'Purchase By:' && data[index][1] !== null){\n          //console.log(data[index]);\n          let temp_string = moment(data[index][1]).format('YYYY-MM-DD');\n          this.setState({\n            sale_end_date: data[index][1],\n            sale_end_date_string: temp_string\n          });\n        }\n        //Get Advance Purchase Days from Sheet 1 and set state for advance_purchase variable\n        if(data[index][0] === 'Advance Purchase:' && data[index][1] !== null){\n          //console.log(data[index]);\n          this.setState({\n            advance_purchase: data[index][1]\n          });\n        }\n        //Get Travel Start Date from Sheet 1 and set state for all travel_start variables\n        if(data[index][0] === 'Travel Start:' && data[index][1] !== null){\n          //console.log(data[index]);\n          let temp_string = moment(data[index][1]).format('YYYY-MM-DD');\n          this.setState({\n            travel_start_alaska_to_from_hawaii: data[index][1],\n            travel_start_alaska_to_from_hawaii_string: temp_string,\n            travel_start_hawaii: data[index][1],\n            travel_start_hawaii_string: temp_string,\n            travel_start_mexico: data[index][1],\n            travel_start_mexico_string: temp_string,\n            travel_start_costa_rica: data[index][1],\n            travel_start_costa_rica_string: temp_string,\n            travel_start_florida: data[index][1],\n            travel_start_florida_string: temp_string,\n            travel_start_others: data[index][1],\n            travel_start_others_string: temp_string\n          });\n        }\n\n        //Get Completed Travel By Date from Sheet 1 and set state for all travel_end variables\n        if(data[index][0] === 'Complete Travel By:' && data[index][1] !== null){\n          //console.log(data[index]);\n          let temp_string = moment(data[index][1]).format('YYYY-MM-DD');\n          this.setState({\n            travel_end_alaska_to_from_hawaii: data[index][1],\n            travel_end_alaska_to_from_hawaii_string: temp_string,\n            travel_end_hawaii: data[index][1],\n            travel_end_hawaii_string: temp_string,\n            travel_end_mexico: data[index][1],\n            travel_end_mexico_string: temp_string,\n            travel_end_costa_rica: data[index][1],\n            travel_end_costa_rica_string: temp_string,\n            travel_end_florida: data[index][1],\n            travel_end_florida_string: temp_string,\n            travel_end_others: data[index][1],\n            travel_end_others_string: temp_string\n          });\n        }\n\n\n\n        //Get Proposed Calendar Dates - PAE\n        if(data[index][0] === 'Calendar Dates - PAE' && data[index][1] !== null){\n          let temp_string_start = moment(data[index-1][1]).format('YYYY-MM-DD');\n          let temp_string_end = moment(data[index][1]).format('YYYY-MM-DD');\n\n          this.setState({\n            proposed_start_pae: data[index-1][1],\n            proposed_start_pae_string: temp_string_start,\n            proposed_end_pae: data[index][1],\n            proposed_end_pae_string: temp_string_end\n          });\n        }\n\n\n        //Get Proposed Calendar Dates - HAWAII\n        if(data[index][0] === 'Calendar Dates - Hawaii' && data[index][1] !== null){\n          let temp_string_start = moment(data[index-1][1]).format('YYYY-MM-DD');\n          let temp_string_end = moment(data[index][1]).format('YYYY-MM-DD');\n\n          this.setState({\n            proposed_start_hawaii: data[index-1][1],\n            proposed_start_hawaii_string: temp_string_start,\n            proposed_end_hawaii: data[index][1],\n            proposed_end_hawaii_string: temp_string_end\n          });\n        }\n\n\n        //Get Proposed Calendar Dates - OTHERS\n        if(data[index][0] === 'Calendar Dates - All' && data[index][1] !== null){\n          let temp_string_start = moment(data[index-1][1]).format('YYYY-MM-DD');\n          let temp_string_end = moment(data[index][1]).format('YYYY-MM-DD');\n\n          this.setState({\n            proposed_start_others: data[index-1][1],\n            proposed_start_others_string: temp_string_start,\n            proposed_end_others: data[index][1],\n            proposed_end_others_string: temp_string_end\n          });\n        }\n\n\n\n\n\n\n        //Get BALCKOUTS\n        if(data[index][0] === 'Blackouts:' && data[index][1] !== null){\n\n          if(data[index][1].indexOf('to') > -1){\n\n              let temp_array = [];\n              let temp_blackout = data[index][1];\n              temp_array = temp_blackout.split(\" to \");\n\n              if(temp_array.length === 2){\n                let temp_blackout_start_date = new Date(temp_array[0]);\n                let temp_blackout_start_date_string = moment(temp_blackout_start_date).format('YYYY-MM-DD');\n\n                let temp_blackout_end_date = new Date(temp_array[1]);\n                let temp_blackout_end_date_string = moment(temp_blackout_end_date).format('YYYY-MM-DD');\n\n                this.setState({\n                  blackout_start_alaska_to_from_hawaii: temp_blackout_start_date,\n                  blackout_start_alaska_to_from_hawaii_string: temp_blackout_start_date_string,\n                  blackout_end_alaska_to_from_hawaii: temp_blackout_end_date,\n                  blackout_end_alaska_to_from_hawaii_string: temp_blackout_end_date_string,\n\n                  blackout_start_from_hawaii: temp_blackout_start_date,\n                  blackout_start_from_hawaii_string: temp_blackout_start_date_string,\n                  blackout_end_from_hawaii: temp_blackout_end_date,\n                  blackout_end_from_hawaii_string: temp_blackout_end_date_string,\n\n                  blackout_start_to_hawaii: temp_blackout_start_date,\n                  blackout_start_to_hawaii_string: temp_blackout_start_date_string,\n                  blackout_end_to_hawaii: temp_blackout_end_date,\n                  blackout_end_to_hawaii_string: temp_blackout_end_date_string,\n\n                  blackout_start_costa_rica: temp_blackout_start_date,\n                  blackout_start_costa_rica_string: temp_blackout_start_date_string,\n                  blackout_end_costa_rica: temp_blackout_end_date,\n                  blackout_end_costa_rica_string: temp_blackout_end_date_string,\n\n                  blackout_start_mexico: temp_blackout_start_date,\n                  blackout_start_mexico_string: temp_blackout_start_date_string,\n                  blackout_end_mexico: temp_blackout_end_date,\n                  blackout_end_mexico_string: temp_blackout_end_date_string,\n\n                  blackout_start_others: temp_blackout_start_date,\n                  blackout_start_others_string: temp_blackout_start_date_string,\n                  blackout_end_others: temp_blackout_end_date,\n                  blackout_end_others_string: temp_blackout_end_date_string,\n\n                });\n              }\n            }else if(data[index][1].indexOf('-') > -1){\n\n              let temp_array = [];\n              let temp_blackout = data[index][1];\n              temp_array = temp_blackout.split(\"-\");\n\n              if(temp_array.length === 2){\n                let temp_blackout_start_date = new Date(temp_array[0]);\n                let temp_blackout_start_date_string = moment(temp_blackout_start_date).format('YYYY-MM-DD');\n\n                let temp_blackout_end_date = new Date(temp_array[1]);\n                let temp_blackout_end_date_string = moment(temp_blackout_end_date).format('YYYY-MM-DD');\n\n                this.setState({\n                  blackout_start_alaska_to_from_hawaii: temp_blackout_start_date,\n                  blackout_start_alaska_to_from_hawaii_string: temp_blackout_start_date_string,\n                  blackout_end_alaska_to_from_hawaii: temp_blackout_end_date,\n                  blackout_end_alaska_to_from_hawaii_string: temp_blackout_end_date_string,\n\n                  blackout_start_from_hawaii: temp_blackout_start_date,\n                  blackout_start_from_hawaii_string: temp_blackout_start_date_string,\n                  blackout_end_from_hawaii: temp_blackout_end_date,\n                  blackout_end_from_hawaii_string: temp_blackout_end_date_string,\n\n                  blackout_start_to_hawaii: temp_blackout_start_date,\n                  blackout_start_to_hawaii_string: temp_blackout_start_date_string,\n                  blackout_end_to_hawaii: temp_blackout_end_date,\n                  blackout_end_to_hawaii_string: temp_blackout_end_date_string,\n\n                  blackout_start_costa_rica: temp_blackout_start_date,\n                  blackout_start_costa_rica_string: temp_blackout_start_date_string,\n                  blackout_end_costa_rica: temp_blackout_end_date,\n                  blackout_end_costa_rica_string: temp_blackout_end_date_string,\n\n                  blackout_start_mexico: temp_blackout_start_date,\n                  blackout_start_mexico_string: temp_blackout_start_date_string,\n                  blackout_end_mexico: temp_blackout_end_date,\n                  blackout_end_mexico_string: temp_blackout_end_date_string,\n\n                  blackout_start_others: temp_blackout_start_date,\n                  blackout_start_others_string: temp_blackout_start_date_string,\n                  blackout_end_others: temp_blackout_end_date,\n                  blackout_end_others_string: temp_blackout_end_date_string,\n\n                });\n            }else{\n              alert(\"NO MATCHING BLACKOUT DATES FOUND!\");\n            }\n\n          }else{\n            alert(\"MULTIPLE BLACKOUT DATES FOUND!\");\n          }\n\n        }\n\n\n\n\n\n\n\n\n      }//end of for loop\n\n      //Get CLUB49 TO U.S Travel Dates\n      if(index_of_travel_from_to_us > 1){\n        let temp_string = moment(data[index_of_travel_from_to_us][1]).format('YYYY-MM-DD');\n        this.setState({\n          travel_from_to_us : data[index_of_travel_from_to_us][1],\n          travel_from_to_us_string : temp_string\n        });\n      }\n      if(index_of_travel_by_to_us > 1){\n        if(data[index_of_travel_by_to_us][0] === \"To U.S.\"){\n          let temp_string = moment(data[index_of_travel_by_to_us][1]).format('YYYY-MM-DD');\n          this.setState({\n            travel_by_to_us : data[index_of_travel_by_to_us][1],\n            travel_by_to_us_string : temp_string\n          });\n        }\n      }\n\n      if(index_of_travel_from_within_alaska > 1){\n        let temp_string = moment(data[index_of_travel_from_within_alaska][1]).format('YYYY-MM-DD');\n        this.setState({\n          travel_from_within_alaska : data[index_of_travel_from_within_alaska][1],\n          travel_from_within_alaska_string : temp_string\n        });\n      }\n      if(index_of_travel_by_within_alaska > 1){\n        //if(data[index_of_travel_by_within_alaska][0] === \"Within Alaska\"){\n          let temp_string = moment(data[index_of_travel_by_within_alaska][1]).format('YYYY-MM-DD');\n          this.setState({\n            travel_by_within_alaska : data[index_of_travel_by_within_alaska][1],\n            travel_by_within_alaska_string : temp_string\n          });\n        //}\n      }\n      //Get CLUB49 WITHIN ALASKA Travel Dates\n\n\n\n\n\n\n\n\n\n\n      // let newArray = this.state.all_my_fares.slice();\n      // newArray.push({\n      //   id: i,\n      //   name: data[i][0],\n      //   group: mygroup,\n      //   default: false,\n      //   origin_code:data[i][2],\n      //   origin_city:this.camelCaseCity(data[i][3]),\n      //   destination_code:data[i][4],\n      //   destination_city:this.camelCaseCity(data[i][5]),\n      //   price:data[i][6],\n      //   fare_type:data[i][11],\n      //   fare_class_code:data[i][7],\n      //   filed_fare:data[i][8],\n      //   taxes:data[i][9],\n      //   shortened_region:data[i][10],\n      //   round_trip:data[i][12],\n      // });\n      // this.setState({\n      //   all_my_fares:newArray\n      // });\n\n\n\n\n\n    })//end of readXlsxFile for Sheet 1\n\n\n          let sheet_name= '';\n          if(this.state.club49_sheet === true){\n            sheet_name = 21;\n          }else if(this.state.club49_sheet === false){\n            sheet_name = this.state.hidden_sheet;\n          }else{\n            sheet_name = this.state.hidden_sheet;\n          }\n\n\n\n        //US Ad Fare Sheet Looper\n        readXlsxFile(file, { sheet: sheet_name }).then((data) => {\n              //Loops through every row in the sheet\n\n\n          if(this.state.selectedOption === 'Saver'){\n\n              for(let i = 0; i < data.length; i++){\n\n                if(this.state.club49_sheet === true){\n                }else{\n                    //Get number of Distinct OD from the US Ad Fare Sheet TAB\n                    if(data[i].indexOf(\"Distinct ODs:\") > -1){\n                      this.setState({\n                        number_of_distinct_od: data[i][data[i].indexOf(\"Distinct ODs:\")+1]\n                      });\n                      //console.log(this.state.number_of_distinct_od);\n                    }\n                }\n\n\n                // console.log(\"DATA[i][0] = \", data[i][0])\n\n\n\n                if (typeof data[i][0] === 'string' && data[i][0] !== null) {\n\n\n\n                  //Checks that the values in index 0 and 2 are airport codes for every row in the spreadsheet\n                  if(typeof data[i][2] == 'string' && (data[i][2].length === 3 && data[i][4].length === 3)){\n\n                    let my_fare_type = data[i][11];\n\n                    // console.log(data[i][2].length);\n\n                    let mygroup = \"\";\n                    if( (groupMeByOrigin(data[i][2]) === \"ALASKA\" && groupMeByOrigin(data[i][4]) === \"HAWAII\") || (groupMeByOrigin(data[i][2]) === \"HAWAII\" && groupMeByOrigin(data[i][4]) === \"ALASKA\") ){\n                        mygroup = \"ALASKA_HAWAII\";\n                    }else if(groupMeByOrigin(data[i][2]) === \"ALASKA\" && groupMeByOrigin(data[i][4]) === \"ALASKA\"){\n                        //CLUB49 UPPER\n                        mygroup = \"ALASKA_ALASKA\";\n                    }else if(groupMeByOrigin(data[i][2]) === \"ALASKA\"){\n                        //CLUB49 LOWER\n                        mygroup = \"FROM_ALASKA\";\n                    }else if(groupMeByOrigin(data[i][4]) === \"ALASKA\"){\n                        mygroup = \"TO_ALASKA\";\n                    }else if(groupMeByOrigin(data[i][2]) === \"HAWAII\"){\n                        mygroup = \"FROM_HAWAII\";\n                    }else if(groupMeByOrigin(data[i][4]) === \"HAWAII\"){\n                        mygroup = \"TO_HAWAII\";\n                    }else if(groupMeByOrigin(data[i][2]) === \"MEXICO\" || groupMeByOrigin(data[i][2]) === \"COSTA_RICA\"){\n                        mygroup = \"\";\n                        console.log(\"THERE SHOULD NOT BE FARES THAT ORIGINATE FROM MEXICO OR COSTA RICA!\");\n                    }else if(groupMeByOrigin(data[i][4]) === \"MEXICO\"){\n                        mygroup = \"MEXICO\";\n                    }else if(groupMeByOrigin(data[i][4]) === \"COSTA_RICA\"){\n                        mygroup = \"COSTA_RICA\";\n                    }else if(groupMeByOrigin(data[i][2]) === \"FLORIDA\"){\n                        mygroup = \"FROM_FLORIDA\";\n                    }else if(groupMeByOrigin(data[i][4]) === \"FLORIDA\"){\n                        mygroup = \"TO_FLORIDA\";\n                    }else if(groupMeByOrigin(data[i][2]) === \"PAE\" || groupMeByOrigin(data[i][4]) === \"PAE\"){\n                        mygroup = \"PAE\";\n                    }else if(groupMeByOrigin(data[i][4]) === \"OTHER_MARKET\"){\n                        mygroup = \"OTHER_MARKET\";\n                    }else{\n                      mygroup = \"\";\n                      console.log(\"NO GROUP WAS FOUND FOR \" +data[i][2]+data[i][4]);\n                    }\n\n\n                    //console.log(data[i]);\n                    let newArray = this.state.all_my_fares.slice();\n\n\n                    if(my_fare_type === \"SAVER\"){\n                      my_fare_type = \"Saver\";\n                    }else{\n                      my_fare_type = \"Main\";\n                    }\n\n\n\n                    newArray.push({\n                      id: i,\n                      name: data[i][0],\n                      group: mygroup,\n                      default: false,\n                      origin_code:data[i][2],\n                      origin_city:this.camelCaseCity(data[i][3]),\n                      destination_code:data[i][4],\n                      destination_city:this.camelCaseCity(data[i][5]),\n                      price:data[i][6],\n                      fare_type: my_fare_type,\n                      fare_class_code:data[i][7],\n                      filed_fare:data[i][8],\n                      taxes:data[i][9],\n                      shortened_region:data[i][10],\n                      round_trip:data[i][12],\n                    });\n                    this.setState({\n                      all_my_fares:newArray\n                    });\n\n\n\n                  }\n\n\n                }\n              }//end of for loop\n\n          }else{\n\n              for(let i = 0; i < data.length; i++){\n\n\n                // console.log(\"INSIDE THE OTHER FORLOOP\")\n\n                if (typeof data[i][0] === 'string' && data[i][0] !== null) {\n\n                  //Checks that the values in index 0 and 2 are airport codes for every row in the spreadsheet\n                  if(typeof data[i][2] == 'string' && (data[i][2].length === 3 && data[i][4].length === 3)){\n                    //console.log(data[i]);\n                    let mygroup = \"\";\n                    if( (groupMeByOrigin(data[i][2]) === \"ALASKA\" && groupMeByOrigin(data[i][4]) === \"HAWAII\") || (groupMeByOrigin(data[i][2]) === \"HAWAII\" && groupMeByOrigin(data[i][4]) === \"ALASKA\") ){\n                        mygroup = \"ALASKA_HAWAII\";\n                    }else if(groupMeByOrigin(data[i][2]) === \"ALASKA\" && groupMeByOrigin(data[i][4]) === \"ALASKA\"){\n                        //CLUB49 UPPER\n                        mygroup = \"ALASKA_ALASKA\";\n                    }else if(groupMeByOrigin(data[i][2]) === \"ALASKA\"){\n                        //CLUB49 LOWER\n                        mygroup = \"FROM_ALASKA\";\n                    }else if(groupMeByOrigin(data[i][4]) === \"ALASKA\"){\n                        mygroup = \"TO_ALASKA\";\n                    }else if(groupMeByOrigin(data[i][2]) === \"HAWAII\"){\n                        mygroup = \"FROM_HAWAII\";\n                    }else if(groupMeByOrigin(data[i][4]) === \"HAWAII\"){\n                        mygroup = \"TO_HAWAII\";\n                    }else if(groupMeByOrigin(data[i][2]) === \"MEXICO\" || groupMeByOrigin(data[i][2]) === \"COSTA_RICA\"){\n                        console.log(\"THERE SHOULD NOT BE FARES THAT ORIGINATE FROM MEXICO OR COSTA RICA!\");\n                    }else if(groupMeByOrigin(data[i][4]) === \"MEXICO\"){\n                        mygroup = \"MEXICO\";\n                    }else if(groupMeByOrigin(data[i][4]) === \"COSTA_RICA\"){\n                        mygroup = \"COSTA_RICA\";\n                    }else if(groupMeByOrigin(data[i][2]) === \"FLORIDA\"){\n                        mygroup = \"FROM_FLORIDA\";\n                    }else if(groupMeByOrigin(data[i][4]) === \"FLORIDA\"){\n                        mygroup = \"TO_FLORIDA\";\n                    }else if(groupMeByOrigin(data[i][2]) === \"PAE\" || groupMeByOrigin(data[i][4]) === \"PAE\"){\n                        mygroup = \"PAE\";\n                    }else if(groupMeByOrigin(data[i][4]) === \"OTHER_MARKET\"){\n                        mygroup = \"OTHER_MARKET\";\n                    }else{\n                      console.log(\"NO GROUP WAS FOUND FOR \" +data[i][2]+data[i][4]);\n                    }\n\n\n                    //console.log(data[i]);\n                    let newArray = this.state.all_my_fares.slice();\n                    // let my_fare_type = data[i][11];\n                    // if(my_fare_type === \"SAVER\"){\n                    //   my_fare_type = \"Saver\";\n                    // }else{\n                    //   my_fare_type = \"Main\";\n                    // }\n\n\n                      newArray.push({\n                        id: i,\n                        name: data[i][0],\n                        group: mygroup,\n                        default: false,\n                        origin_code:data[i][2],\n                        origin_city:this.camelCaseCity(data[i][3]),\n                        destination_code:data[i][4],\n                        destination_city:this.camelCaseCity(data[i][5]),\n                        price:data[i][6],\n                        fare_type: null,\n                        fare_class_code:null,\n                        taxes:data[i][8],\n                        shortened_region: null,\n                        round_trip:data[i][10],\n                      });\n                      this.setState({\n                        all_my_fares:newArray\n                      });\n\n\n\n\n                  }\n\n\n                }\n\n              }//End of forloop for Award Sale\n\n\n          }\n\n\n\n          let temp_arr = this.state.all_my_fares.slice();\n          temp_arr.sort(compareDestinationCode); //SORT by Destination Code first for alphabetical\n          temp_arr.sort(compareOriginCode); //SORT by Origin Code second for alphabetical\n          temp_arr.sort(comparePrice); //SORT by Price last for lowest to highest fares\n\n          this.setState({\n            all_my_fares:temp_arr\n          });\n\n\n          let temp_combined = this.state.combined_saver_and_main.slice();\n          let temp_combined_club49 = this.state.all_my_fares.slice();\n\n          if(this.state.club49_sheet === true){\n            //Get the tuesday after the travel start date\n            console.log(\"CLUB 49 Calendar Dates : START :\"+getMyFirstTuesday(this.state.travel_from_to_us, 2));\n            console.log(\"CLUB 49 Calendar Dates : END :\"+getMySecondTuesday(this.state.travel_from_to_us, 2));\n\n            let temp_string1 = moment(getMyFirstTuesday(this.state.travel_from_to_us, 2)).format('YYYY-MM-DD');\n            let temp_string2 = moment(getMySecondTuesday(this.state.travel_from_to_us, 2)).format('YYYY-MM-DD');\n\n            this.setState({\n              proposed_from_clu49: getMyFirstTuesday(this.state.travel_from_to_us, 2),\n              proposed_to_clu49: getMySecondTuesday(this.state.travel_from_to_us, 2),\n              proposed_from_clu49_string: temp_string1,\n              proposed_to_clu49_string: temp_string2\n            });\n\n\n\n            temp_combined_club49 = mergeClub49(this.state.all_my_fares);\n\n            this.setState({\n              combined_club_49: temp_combined_club49\n            });\n\n          }else{\n            temp_combined = mergeObjects(this.state.all_my_fares);\n\n            this.setState({\n              combined_saver_and_main: temp_combined\n            });\n          }\n\n        })//end of readXlsxFile for US Ad Fare Sheet\n\n\n\n    if(this.state.selectedOption === 'Saver'){\n    //Email Marketing Sheet Looper\n      readXlsxFile(file, { sheet: 3 }).then((data) => {\n        //Loops through every row in the sheet\n        let lowest_sea = null;\n        let lowest_pdx = null;\n        let lowest_bay = null;\n        let lowest_la = null;\n        let lowest_no_pdc = null;\n\n\n\n        for(let i = 0; i < data.length; i++){\n\n          //Get Lowest Price Points EMAIL MARKETING\n          if(data[i].indexOf(\"From:\") > -1){\n            // console.log(data[i][data[i].indexOf(\"From:\")]);\n            // console.log(i);\n            lowest_sea = i + 1;\n            lowest_pdx = i + 2;\n            lowest_bay = i + 3;\n            lowest_la = i + 4;\n            lowest_no_pdc =  i + 5;\n            // this.setState({\n            //   number_of_distinct_od: data[i][data[i].indexOf(\"Distinct ODs:\")+1]\n            // });\n            //console.log(this.state.number_of_distinct_od);\n          }\n\n          if(i === lowest_sea){\n            // console.log(data[i][9] + \"====\"+ data[i][10]);\n            this.setState({\n              lowest_price_sea: data[i][9]+data[i][10]\n            })\n          }\n          if(i === lowest_pdx){\n            // console.log(data[i][9] + \"====\"+ data[i][10]);\n            this.setState({\n              lowest_price_pdx: data[i][9]+data[i][10]\n            })\n          }\n          if(i === lowest_bay){\n            // console.log(data[i][9] + \"====\"+ data[i][10]);\n            this.setState({\n              lowest_price_bay: data[i][9]+data[i][10]\n            })\n          }\n          if(i === lowest_la){\n            // console.log(data[i][9] + \"====\"+ data[i][10]);\n            this.setState({\n              lowest_price_la: data[i][9]+data[i][10]\n            })\n          }\n          if(i === lowest_no_pdc){\n            // console.log(data[i][9] + \"====\"+ data[i][10]);\n            this.setState({\n              lowest_price_no_pdc: data[i][9]+data[i][10]\n            })\n          }\n\n        }\n\n      })//end of readXlsxFile for US Ad Fare Sheet\n    }else{\n      readXlsxFile(file, { sheet: 5 }).then((data) => {\n        //Loops through every row in the sheet\n        let lowest_sea = null;\n        let lowest_pdx = null;\n        let lowest_bay = null;\n        let lowest_la = null;\n        let lowest_no_pdc = null;\n\n\n\n        for(let i = 0; i < data.length; i++){\n\n          //Get Lowest Price Points EMAIL MARKETING\n          if(data[i].indexOf(\"From:\") > -1){\n            // console.log(data[i][data[i].indexOf(\"From:\")]);\n            // console.log(i);\n            lowest_sea = i + 1;\n            lowest_pdx = i + 2;\n            lowest_bay = i + 3;\n            lowest_la = i + 4;\n            lowest_no_pdc =  i + 5;\n            // this.setState({\n            //   number_of_distinct_od: data[i][data[i].indexOf(\"Distinct ODs:\")+1]\n            // });\n            //console.log(this.state.number_of_distinct_od);\n          }\n\n          if(i === lowest_sea){\n            // console.log(data[i][8] + \"====\"+ data[i][9]);\n            this.setState({\n              lowest_price_sea: data[i][8]+data[i][9]\n            })\n          }\n          if(i === lowest_pdx){\n            // console.log(data[i][8] + \"====\"+ data[i][9]);\n            this.setState({\n              lowest_price_pdx: data[i][8]+data[i][9]\n            })\n          }\n          if(i === lowest_bay){\n            // console.log(data[i][8] + \"====\"+ data[i][9]);\n            this.setState({\n              lowest_price_bay: data[i][8]+data[i][9]\n            })\n          }\n          if(i === lowest_la){\n            // console.log(data[i][8] + \"====\"+ data[i][9]);\n            this.setState({\n              lowest_price_la: data[i][8]+data[i][9]\n            })\n          }\n          if(i === lowest_no_pdc){\n            // console.log(data[i][8] + \"====\"+ data[i][9]);\n            this.setState({\n              lowest_price_no_pdc: data[i][8]+data[i][9]\n            })\n          }\n\n        }\n\n      })//end of readXlsxFile for US Ad Fare Sheet / AWARD SALE TYPE\n    }\n\n\n    //Only read AS.com tab if its a saver spreadsheet\n    if(this.state.selectedOption === 'Saver'){\n\n      let ascom_sheet= '';\n      if(this.state.club49_sheet === true){\n        ascom_sheet = 'AS.com';\n      }else{\n        ascom_sheet = 'AS.com';\n      }\n\n      // //AS.com TAB Looper\n      readXlsxFile(file, { sheet: ascom_sheet }).then((data) => {\n        //Loops through every row in the sheet\n\n            for(let i = 0; i < data.length; i++){\n\n              if(data[i][17] !== null && data[i][18] !== null){\n                if(typeof data[i][17] == 'string' && typeof data[i][18] == 'number'){\n                // console.log(data[i][17] + \" : \" + data[i][18]);\n\n                  this.markAsDefault(data[i][17]);\n                  // this.grabDefaultsFromSheet(data[i][17], data[i][18]);\n                  this.displayData.push(<div className=\"display-data\" style={{fontSize:13, fontWeight:'bold'}}><div className=\"cityPair\" style={{textAlign:'left',marginLeft:80, display:'inline',color:'purple'}}>{data[i][17]}</div><div className=\"cityPrice\" style={{display:'inline',color:'green', marginLeft:120}}>{data[i][18]}</div></div>);\n                  this.setState({\n                    showdata : this.displayData,\n                    postVal : \"\",\n                    textareaedit: false\n                  });\n\n                }\n              }\n\n            }//end of for loop\n\n      })//end of readXlsxFile for Sheet 4\n\n\n    }else{\n      readXlsxFile(file, { sheet: 3 }).then((data) => {\n        //Loops through every row in the sheet\n\n            for(let i = 0; i < data.length; i++){\n\n              if(data[i][16] !== null && data[i][17] !== null){\n                if(typeof data[i][16] == 'string' && typeof data[i][17] == 'number'){\n                // console.log(data[i][17] + \" : \" + data[i][18]);\n\n                  this.markAsDefault(data[i][16]);\n                  // this.grabDefaultsFromSheet(data[i][17], data[i][18]);\n                  this.displayData.push(<div className=\"display-data\" style={{fontSize:13, fontWeight:'bold'}}><div className=\"cityPair\" style={{textAlign:'left',marginLeft:80, display:'inline',color:'purple'}}>{data[i][16]}</div><div className=\"cityPrice\" style={{display:'inline',color:'green', marginLeft:120}}>{data[i][17]}</div></div>);\n                  this.setState({\n                    showdata : this.displayData,\n                    postVal : \"\",\n                    textareaedit: false\n                  });\n\n                }\n              }\n\n            }//end of for loop Award Sale DEFAULTS\n\n      })//end of readXlsxFile for Sheet 4\n    }\n\n\n\n\n\n\n  }\n\n  handleExceptionCodeChange = (idx) => (evt) => {\n    let temp_code = evt.target.value ;\n    temp_code = temp_code.toUpperCase();\n    if(temp_code.length === 6){\n      temp_code = temp_code.match(/.{1,3}/g);\n    }else{\n      temp_code = evt.target.value\n    }\n\n    const newShareholders = this.state.exceptions.map((item, sidx) => {\n      if (idx !== sidx) return item;\n      return {\n        ...item,\n        code_origin: temp_code[0],\n        code_destination: temp_code[1]\n      };\n    });\n    this.setState({\n      exceptions: newShareholders\n    });\n  }\n\n  handleExceptionTravelValid = (idx) => (evt) => {\n    const newShareholders = this.state.exceptions.map((item, sidx) => {\n      if (idx !== sidx) return item;\n      return {\n        ...item,\n        travel_valid: evt.target.value\n      };\n    });\n    this.setState({\n      exceptions: newShareholders\n    });\n  }\n\n  handleExceptionServiceBegins = (idx) => (date) => {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    const newShareholders = this.state.exceptions.map((item, sidx) => {\n      if (idx !== sidx) return item;\n      return {\n        ...item,\n        service_begins: date,\n        begins_string:temp_string,\n      };\n    });\n\n    this.setState({\n      exceptions: newShareholders\n    });\n  }\n  handleExceptionServiceEnds = (idx) => (date) => {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    const newShareholders = this.state.exceptions.map((item, sidx) => {\n      if (idx !== sidx) return item;\n      return {\n        ...item,\n        service_ends: date,\n        ends_string:temp_string,\n      };\n    });\n\n    this.setState({\n      exceptions: newShareholders\n    });\n  }\n\n\n\n\n  handleAddException = () => {\n    this.setState({\n      exceptions: this.state.exceptions.concat([{ code_origin: '', code_destination: '', travel_valid: '', service_begins: null, service_ends: null, begins_string:'', ends_string:'' }])\n    });\n  }\n\n\n  handleRemoveException = (idx) => () => {\n    this.setState({\n      exceptions: this.state.exceptions.filter((s, sidx) => idx !== sidx)\n    });\n  }\n\n\n  resetOutputVariable = () => () => {\n\n   // let newArray = this.state.xmloutput.slice();\n    this.setState({\n      xmloutput:''\n    });\n\n  }\n\n\n\n  travelFromToUSHandler = (date) => {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n\n    this.setState({\n      travel_from_to_us: date,\n      travel_from_to_us_string: temp_string\n    });\n  }\n  travelByToUSHandler = (date) => {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      travel_by_to_us: date,\n      travel_by_to_us_string: temp_string\n    });\n  }\n  daysAvailabilityToUSHandler = (e) => {\n    this.setState({\n      days_availability_to_us: e.target.value\n    });\n  }\n\n\n\n  travelFromWithinAlaskaHandler = (date) => {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n\n    this.setState({\n      travel_from_within_alaska: date,\n      travel_from_within_alaska_string: temp_string\n    });\n  }\n  travelByWithinAlaskaHandler = (date) => {\n    let temp_string = moment(date).format('YYYY-MM-DD');\n    this.setState({\n      travel_by_within_alaska: date,\n      travel_by_within_alaska_string: temp_string\n    });\n  }\n  daysAvailabilityWithinAlaskaHandler = (e) => {\n    this.setState({\n      days_availability_within_alaska: e.target.value\n    });\n  }\n\n\n\n  render() {\n\n    // console.log(this.state.selectedOption);\n\n\n\n    return (\n      <div className=\"App\">\n      <div className=\"\">\n\n        <div className=\"row col-md-12\">\n          {/* <input type = \"text\" value = {this.state.firstinput} onChange = {this.updateFirstInput} /> */}\n\n\n          {/* <CSVDownload data={csvData} filename={\"my-file.csv\"} target=\"_blank\" /> */}\n\n          <form className=\"detailsForm\"  onSubmit={this.createSaleDetails}>\n\n            <div className=\"form-row sale-information\">\n                <div className=\"row col-md-12\">\n                    <div className=\"form-group col-md-2\">\n                      <h3 className=\"information-headline\">Sale Information 2:</h3>\n                    </div>\n                    <div className=\"form-group col-md-2\">\n                      {/* <a href=\"TEMPLATE.xlsx\" download className=\"btn btn-success download-template\">\n                          <i className=\"fa fa-download\"></i> Download Template\n                      </a> */\n                      // https://alaskaair.sharepoint.com/sites/PublishedPricing/Shared%20Documents/Forms/AllItems.aspx?id=%2Fsites%2FPublishedPricing%2FShared%20Documents%2FSales%2FDetail%20and%20Fare%20Dumps\n                      }\n                      <a href=\"https://alaskaair.sharepoint.com/sites/PublishedPricing/Shared%20Documents/Forms/AllItems.aspx?id=%2Fsites%2FPublishedPricing%2FShared%20Documents%2FSales%2FDetail%20and%20Fare%20Dumps\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"sharepoint-link\">\n                          <i className=\"fa fa-upload\"></i> DROP CSV FILES HERE\n                      </a>\n                    </div>\n                    <div className=\"form-group col-md-2\">\n                      <a href=\"https://alaskaair.sharepoint.com/sites/TeamEP/Shared%20Documents/Forms/AllItems.aspx?cid=91ab9bff-77b0-4540-88d4-c8aacfe4cb04&RootFolder=%2Fsites%2FTeamEP%2FShared%20Documents%2F3-Campaigns%2FFare%20Sales%2FWeeklyFlightDeals&FolderCTID=0x012000B3CE6DC9828D0441B10382FB20A01BBC\" rel=\"noopener noreferrer\" target=\"_blank\" className=\"sharepoint-link\">\n                          <i className=\"fa fa-folder\"></i> Sharepoint\n                      </a>\n                    </div>\n\n                    <div className=\"form-group col-md-1\">\n                        <label className=\"radio-inline\">\n                            <input type=\"radio\" name=\"sale_type\" defaultChecked value=\"Saver\" onChange={() => this.setState({selectedOption: 'Saver'})}/> Saver\n                        </label>\n                    </div>\n                    <div className=\"form-group col-md-1\">\n                        <label className=\"radio-inline\">\n                            <input type=\"radio\" name=\"sale_type\" value=\"Mileage\" onChange={() => this.setState({selectedOption: 'Mileage'})} />\n                            Awards Sale\n                        </label>\n\n                    </div>\n                    <div className=\"form-group col-md-3\">\n                      <input type=\"file\" className=\"form-control\" id=\"inputFile\" onChange={this.onFileChange} />\n                      {/* <div className=\"form-group-input\">\n                        <label className=\"label\">\n                          <i className=\"material-icons\">attach_file</i>\n                          <span className=\"title\">Add File</span>\n                          <input type=\"file\" className=\"\" id=\"inputFile\" onChange={this.onFileChange}/>\n                        </label>\n                      </div> */}\n                    </div>\n                    <div className=\"form-group col-md-1\">\n                        <input type=\"text\" className=\"form-control\" id=\"sheet_number\" onChange={this.changeHiddenSheet} placeholder=\"\" value={this.state.hidden_sheet} style={{marginTop:10}}/>\n                    </div>\n\n\n                </div>\n                <div className=\"form-group col-md-3\">\n                    {/* This row is for Sale Start */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"saleStartDate\"><strong>Sale Start</strong></label><br />\n                      <DatePicker className=\"form-control\" id=\"saleStartDate\" selected={this.state.sale_start_date} onChange={this.saleStartDateHandler} />\n                    </div>\n                    {/* This row is for Sale End */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"saleEndDate\"><strong>Purchase By</strong></label>\n                      <DatePicker className=\"form-control\" id=\"saleEndDate\" selected={this.state.sale_end_date} onChange={this.saleEndDateHandler} />\n                    </div>\n                    {/* This row is for Advance Purchase */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"advancePurchase\"><strong>Advance Purchase</strong></label>\n                      <input type=\"text\" className=\"form-control\" id=\"advancePurchase\" value = {this.state.advance_purchase} onChange = {this.advancePurchaseHandler} />\n                    </div>\n\n\n\n                    <div className=\"row col-md-12\">\n                      <div className=\"form-group text-area-div\">\n                        <label htmlFor=\"default_markets\"><strong>Default Markets:</strong></label>\n\n                        {this.state.textareaedit === true ? (\n                          <textarea className=\"form-control rounded-0\" id=\"default_markets\" rows=\"6\" onChange={this.saveDefaultMarkets} ></textarea>\n                        ): (\n                          <div id=\"display-data-Container\" style={{height:165}}>{this.displayData}</div>\n                        )}\n\n                      </div>\n                    </div>\n\n\n                    {/* This row is for Proposed PAE Dates */}\n                    <div className=\"row col-md-12\">\n\n                      <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"proposed-headline\"><strong>Proposed Dates:</strong> PAE</h6>\n                      </div>\n                      <div className=\"col-md-5 remove-padding\">\n                          <DatePicker className=\"form-control\" selected={this.state.proposed_start_pae} onChange={this.proposedStartDatePAEHandler} />\n                      </div>\n\n                      <div className=\"col-md-2 text-center\">\n                          <h6 className=\"\">to</h6>\n                      </div>\n\n                      <div className=\"col-md-5 remove-padding\">\n                          <DatePicker className=\"form-control\" selected={this.state.proposed_end_pae} onChange={this.proposedEndDatePAEHandler} />\n                      </div>\n\n                    </div>\n\n\n\n\n                </div>\n\n\n                {/* TRAVEL START INPUTS */}\n                <div className=\"form-group col-md-3\">\n                    {/* This row is for Travel Start: Alaska to/from Hawaii */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"travel_start_alaska_to_from_hawaii\"><strong>Travel Start:</strong> Alaska to/from Hawaii</label><br />\n                      <DatePicker className=\"form-control\" id=\"travel_start_alaska_to_from_hawaii\" selected={this.state.travel_start_alaska_to_from_hawaii} onChange={this.travelStartAlaskaToFromHawaiiDateHandler} />\n                    </div>\n\n                    {/* This row is for Travel Start: HAWAII */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"travel_start_hawaii\"><strong>Travel Start:</strong> Hawaii</label><br />\n                      <DatePicker className=\"form-control\" id=\"travel_start_hawaii\" selected={this.state.travel_start_hawaii} onChange={this.travelStartHawaiiHandler} />\n                    </div>\n\n                    {/* This row is for Travel Start: MEXICO */}\n                    <div className=\"row col-md-12\">\n                    <label htmlFor=\"travel_start_mexico\"><strong>Travel Start:</strong> Mexico</label><br />\n                      <DatePicker className=\"form-control\" id=\"travel_start_mexico\" selected={this.state.travel_start_mexico} onChange={this.travelStartMexicoHandler} />\n                    </div>\n\n                    {/* This row is for Travel Start: COSTA RICA */}\n                    <div className=\"row col-md-12\">\n                    <label htmlFor=\"travel_start_costa_rica\"><strong>Travel Start:</strong> Costa Rica</label><br />\n                      <DatePicker className=\"form-control\" id=\"travel_start_costa_rica\" selected={this.state.travel_start_costa_rica} onChange={this.travelStartCostaRicaHandler} />\n                    </div>\n\n                    {/* This row is for Travel Start: FLORIDA */}\n                    <div className=\"row col-md-12\">\n                    <label htmlFor=\"travel_start_florida\"><strong>Travel Start:</strong> Florida</label><br />\n                      <DatePicker className=\"form-control\" id=\"travel_start_florida\" selected={this.state.travel_start_others} readOnly />\n                    </div>\n\n                    {/* This row is for Travel Start: ALL OTHER MARKET */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"travel_start_others\"><strong>Travel Start:</strong> Other Markets</label><br />\n                      <DatePicker className=\"form-control\" id=\"travel_start_others\" selected={this.state.travel_start_others} onChange={this.travelStartOthersHandler} />\n                    </div>\n\n                    {/* This row is for Proposed Hawaii Dates */}\n                    <div className=\"row col-md-12\">\n\n                      <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"proposed-headline\"><strong>Proposed Dates:</strong> Hawaii</h6>\n                      </div>\n                      <div className=\"col-md-5 remove-padding\">\n                          <DatePicker className=\"form-control\" selected={this.state.proposed_start_hawaii} onChange={this.proposedStartDateHawaiiHandler} />\n                      </div>\n\n                      <div className=\"col-md-2 text-center\">\n                          <h6 className=\"\">to</h6>\n                      </div>\n\n                      <div className=\"col-md-5 remove-padding\">\n                          <DatePicker className=\"form-control\" selected={this.state.proposed_end_hawaii} onChange={this.proposedEndDateHawaiiHandler} />\n                      </div>\n\n                    </div>\n\n\n                </div>\n\n\n\n                {/* COMPLETED TRAVEL BY INPUTS */}\n                <div className=\"form-group col-md-3\">\n                    {/* This row is for Complete Travel By: Alaska to/from Hawaii */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"travel_end_alaska_to_from_hawaii\"><strong>Completed Travel By:</strong> Alaska to/from Hawaii</label><br />\n                      <DatePicker className=\"form-control\" id=\"travel_end_alaska_to_from_hawaii\" selected={this.state.travel_end_alaska_to_from_hawaii} onChange={this.travelEndAlaskaToFromHawaiiDateHandler} />\n                    </div>\n\n                    {/* This row is for Complete Travel By: HAWAII */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"travel_end_hawaii\"><strong>Completed Travel By:</strong> Hawaii</label><br />\n                      <DatePicker className=\"form-control\" id=\"travel_end_hawaii\" selected={this.state.travel_end_hawaii} onChange={this.travelEndHawaiiHandler} />\n                    </div>\n\n                    {/* This row is for Complete Travel By: MEXICO */}\n                    <div className=\"row col-md-12\">\n                    <label htmlFor=\"travel_end_mexico\"><strong>Completed Travel By:</strong> Mexico</label><br />\n                      <DatePicker className=\"form-control\" id=\"travel_end_mexico\" selected={this.state.travel_end_mexico} onChange={this.travelEndMexicoHandler} />\n                    </div>\n\n                    {/* This row is for Complete Travel By: COSTA RICA */}\n                    <div className=\"row col-md-12\">\n                    <label htmlFor=\"travel_end_costa_rica\"><strong>Completed Travel By:</strong> Costa Rica</label><br />\n                      <DatePicker className=\"form-control\" id=\"travel_end_costa_rica\" selected={this.state.travel_end_costa_rica} onChange={this.travelEndCostaRicaHandler} />\n                    </div>\n\n                    {/* This row is for Complete Travel By: FLORIDA */}\n                    <div className=\"row col-md-12\">\n                    <label htmlFor=\"travel_end_florida\"><strong>Completed Travel By:</strong> Florida</label><br />\n                      <DatePicker className=\"form-control\" id=\"travel_end_florida\" selected={this.state.travel_end_others} readOnly />\n                    </div>\n\n                    {/* This row is for Complete Travel By: ALL OTHER MARKET */}\n                    <div className=\"row col-md-12\">\n                    <label htmlFor=\"travel_end_others\"><strong>Completed Travel By:</strong> Other Markets</label><br />\n                      <DatePicker className=\"form-control\" id=\"travel_end_others\" selected={this.state.travel_end_others} onChange={this.travelEndOthersHandler} />\n                    </div>\n\n\n                    {/* This row is for Proposed Others Dates */}\n                    <div className=\"row col-md-12\">\n                        <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"proposed-headline\"><strong>Proposed Dates:</strong> Others</h6>\n                        </div>\n\n                        <div className=\"col-md-5 remove-padding\">\n                          <DatePicker className=\"form-control\" selected={this.state.proposed_start_others} onChange={this.proposedStartDateOthersHandler} />\n                        </div>\n\n                        <div className=\"col-md-2 text-center\">\n                          <h6 className=\"\">to</h6>\n                        </div>\n\n                        <div className=\"col-md-5 remove-padding\">\n                          <DatePicker className=\"form-control\" selected={this.state.proposed_end_others} onChange={this.proposedEndDateOthersHandler} />\n                        </div>\n                    </div>\n\n                </div>\n\n\n\n                {/* DAY/TIME AVAILABILITY INPUTS */}\n                <div className=\"form-group col-md-3\">\n                    {/* This row is for Days Availability: Alaska to/from Hawaii */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"days_availability_alaska_to_from_hawaii\"><strong>Days Availability:</strong> Alaska to/from Hawaii</label><br />\n                      <input type=\"text\" className=\"form-control\" id=\"days_availability_alaska_to_from_hawaii\" value = {this.state.days_availability_hawaii} readOnly />\n                    </div>\n\n                    {/* This row is for Days Availability: HAWAII */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"days_availability_hawaii\"><strong>Days Availability:</strong> Hawaii</label><br />\n                      <input type=\"text\" className=\"form-control\" id=\"days_availability_hawaii\" value = {this.state.days_availability_hawaii} onChange={this.daysAvailabilityHawaiiHandler} />\n                    </div>\n\n                    {/* This row is for Days Availability: MEXICO */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"days_availability_mexico\"><strong>Days Availability:</strong> Mexico</label><br />\n                      <input type=\"text\" className=\"form-control\" id=\"days_availability_mexico\" value = {this.state.days_availability_mexico} onChange={this.daysAvailabilityMexicoHandler} />\n                    </div>\n\n                    {/* This row is for Days Availability: COSTA RICA */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"days_availability_costa_rica\"><strong>Days Availability:</strong> Costa Rica</label><br />\n                      <input type=\"text\" className=\"form-control\" id=\"days_availability_costa_rica\" value = {this.state.days_availability_costa_rica} onChange={this.daysAvailabilityCostaRicaHandler} />\n                    </div>\n\n                    {/* This row is for Days Availability: TO FLORIDA */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"days_availability_to_florida\"><strong>Days Availability:</strong> To Florida</label><br />\n                      <input type=\"text\" className=\"form-control\" id=\"days_availability_to_florida\" value = {this.state.days_availability_to_florida} onChange={this.daysAvailabilityToFloridaHandler}/>\n                    </div>\n\n                    {/* This row is for Days Availability: FROM FLORIDA */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"days_availability_from_florida\"><strong>Days Availability:</strong> From Florida</label><br />\n                      <input type=\"text\" className=\"form-control\" id=\"days_availability_from_florida\" value = {this.state.days_availability_from_florida} onChange={this.daysAvailabilityFromFloridaHandler} />\n                    </div>\n\n                    {/* This row is for Days Availability: ALL OTHER MARKET */}\n                    <div className=\"row col-md-12\">\n                      <label htmlFor=\"days_availability_others\"><strong>Days Availability:</strong> Other Markets</label><br />\n                      <input type=\"text\" className=\"form-control\" id=\"days_availability_others\" value = {this.state.days_availability_others} onChange={this.daysAvailabilityOthersHandler} />\n                    </div>\n                </div>\n              {/* End of 1st Form ROW */}\n              </div>\n\n\n\n              {/* CLUB 49 Information ROW */}\n              <div className=\"form-row club49-information\">\n                  <div className=\"row col-md-12\">\n                      <h3 className=\"information-headline\">Club 49:</h3>\n                  </div>\n                  <div className=\"form-group col-md-3\">\n                      <div className=\"row col-md-12 individual-club49\">\n                        <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"club49-headline black-color\"><strong>Travel From:</strong> To U.S.</h6>\n                        </div>\n                        <div className=\"col-md-12 remove-padding\">\n                        <DatePicker className=\"form-control\" selected={this.state.travel_from_to_us} onChange={this.travelFromToUSHandler} />\n                        </div>\n                      </div>\n                  </div>\n\n                  <div className=\"form-group col-md-3\">\n                      <div className=\"row col-md-12 individual-club49\">\n                        <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"club49-headline black-color\"><strong>Travel By:</strong> To U.S.</h6>\n                        </div>\n                        <div className=\"col-md-12 remove-padding\">\n                        <DatePicker className=\"form-control\" selected={this.state.travel_by_to_us} onChange={this.travelByToUSHandler} />\n                        </div>\n                      </div>\n                  </div>\n\n                  <div className=\"form-group col-md-6\">\n                      <div className=\"row col-md-12 individual-club49\">\n                        <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"club49-headline black-color\"><strong>Days Availability:</strong> To U.S.</h6>\n                        </div>\n                        <div className=\"col-md-12 remove-padding\">\n                        <input type=\"text\" className=\"form-control\" id=\"days_availability_to_us\" value = {this.state.days_availability_to_us} onChange={this.daysAvailabilityToUSHandler} />\n                        </div>\n                      </div>\n                  </div>\n\n                  <div className=\"form-group col-md-3\">\n                      <div className=\"row col-md-12 individual-club49\">\n                        <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"club49-headline black-color\"><strong>Travel From:</strong> Within Alaska</h6>\n                        </div>\n                        <div className=\"col-md-12 remove-padding\">\n                        <DatePicker className=\"form-control\" selected={this.state.travel_from_within_alaska} onChange={this.travelFromWithinAlaskaHandler} />\n                        </div>\n                      </div>\n                  </div>\n\n                  <div className=\"form-group col-md-3\">\n                      <div className=\"row col-md-12 individual-club49\">\n                        <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"club49-headline black-color\"><strong>Travel By:</strong> Within Alaska</h6>\n                        </div>\n                        <div className=\"col-md-12 remove-padding\">\n                        <DatePicker className=\"form-control\" selected={this.state.travel_by_within_alaska} onChange={this.travelByWithinAlaskaHandler} />\n                        </div>\n                      </div>\n                  </div>\n\n                  <div className=\"form-group col-md-6\">\n                      <div className=\"row col-md-12 individual-club49\">\n                        <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"club49-headline black-color\"><strong>Days Availability:</strong> Within Alaska</h6>\n                        </div>\n                        <div className=\"col-md-12 remove-padding\">\n                        <input type=\"text\" className=\"form-control\" id=\"days_availability_within_alaska\" value = {this.state.days_availability_within_alaska} onChange={this.daysAvailabilityWithinAlaskaHandler} />\n                        </div>\n                      </div>\n                  </div>\n\n              </div>\n\n\n\n\n\n\n\n              {/* Blackout Information ROW */}\n              <div className=\"form-row blackout-information\">\n                  <div className=\"row col-md-12\">\n                      <h3 className=\"information-headline\">Blackouts:</h3>\n                  </div>\n                  <div className=\"form-group col-md-4\">\n                      <div className=\"row col-md-12 individual-blackout\">\n                        <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"blackout-headline black-color\"><strong>Blackout Dates:</strong> Alaska to/from Hawaii</h6>\n                        </div>\n                        <div className=\"col-md-5 remove-padding\">\n                        <DatePicker className=\"form-control\" selected={this.state.blackout_start_alaska_to_from_hawaii} onChange={this.blackoutStartDateAlaskaToFromHawaiiHandler} />\n                        </div>\n                        <div className=\"col-md-2 text-center\">\n                          <h6 className=\"black-color\">to</h6>\n                        </div>\n                        <div className=\"col-md-5 remove-padding\">\n                          <DatePicker className=\"form-control\" selected={this.state.blackout_end_alaska_to_from_hawaii} onChange={this.blackoutEndDateAlaskaToFromHawaiiHandler} />\n                        </div>\n                      </div>\n                  </div>\n\n                  <div className=\"form-group col-md-4\">\n                      <div className=\"row col-md-12 individual-blackout\">\n                        <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"blackout-headline black-color\"><strong>Blackout Dates:</strong> To Hawaii</h6>\n                        </div>\n                        <div className=\"col-md-5 remove-padding\">\n                        <DatePicker className=\"form-control\" selected={this.state.blackout_start_to_hawaii} onChange={this.blackoutStartDateToHawaiiHandler} />\n                        </div>\n                        <div className=\"col-md-2 text-center\">\n                          <h6 className=\"black-color\">to</h6>\n                        </div>\n                        <div className=\"col-md-5 remove-padding\">\n                          <DatePicker className=\"form-control\" selected={this.state.blackout_end_to_hawaii} onChange={this.blackoutEndDateToHawaiiHandler} />\n                        </div>\n                      </div>\n                  </div>\n\n                  <div className=\"form-group col-md-4\">\n                      <div className=\"row col-md-12 individual-blackout\">\n                        <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"blackout-headline black-color\"><strong>Blackout Dates:</strong> From Hawaii</h6>\n                        </div>\n                        <div className=\"col-md-5 remove-padding\">\n                        <DatePicker className=\"form-control\" selected={this.state.blackout_start_from_hawaii} onChange={this.blackoutStartDateFromHawaiiHandler} />\n                        </div>\n                        <div className=\"col-md-2 text-center\">\n                          <h6 className=\"black-color\">to</h6>\n                        </div>\n                        <div className=\"col-md-5 remove-padding\">\n                          <DatePicker className=\"form-control\" selected={this.state.blackout_end_from_hawaii} onChange={this.blackoutEndDateFromHawaiiHandler} />\n                        </div>\n                      </div>\n                  </div>\n\n                  <div className=\"form-group col-md-4\">\n                      <div className=\"row col-md-12 individual-blackout\">\n                        <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"blackout-headline black-color\"><strong>Blackout Dates:</strong> Mexico</h6>\n                        </div>\n                        <div className=\"col-md-5 remove-padding\">\n                        <DatePicker className=\"form-control\" selected={this.state.blackout_start_mexico} onChange={this.blackoutStartDateMexicoHandler} />\n                        </div>\n                        <div className=\"col-md-2 text-center\">\n                          <h6 className=\"black-color\">to</h6>\n                        </div>\n                        <div className=\"col-md-5 remove-padding\">\n                          <DatePicker className=\"form-control\" selected={this.state.blackout_end_mexico} onChange={this.blackoutEndDateMexicoHandler} />\n                        </div>\n                      </div>\n                  </div>\n                  <div className=\"form-group col-md-4\">\n                      <div className=\"row col-md-12 individual-blackout\">\n                        <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"blackout-headline black-color\"><strong>Blackout Dates:</strong> Costa Rica</h6>\n                        </div>\n                        <div className=\"col-md-5 remove-padding\">\n                        <DatePicker className=\"form-control\" selected={this.state.blackout_start_costa_rica} onChange={this.blackoutStartDateCostaRicaHandler} />\n                        </div>\n                        <div className=\"col-md-2 text-center\">\n                          <h6 className=\"black-color\">to</h6>\n                        </div>\n                        <div className=\"col-md-5 remove-padding\">\n                          <DatePicker className=\"form-control\" selected={this.state.blackout_end_costa_rica} onChange={this.blackoutEndDateCostaRicaHandler} />\n                        </div>\n                      </div>\n                  </div>\n                  <div className=\"form-group col-md-4\">\n                      <div className=\"row col-md-12 individual-blackout\">\n                        <div className=\"col-md-12 remove-padding\">\n                          <h6 className=\"blackout-headline black-color\"><strong>Blackout Dates:</strong> Other Markets</h6>\n                        </div>\n                        <div className=\"col-md-5 remove-padding\">\n                        <DatePicker className=\"form-control\" selected={this.state.blackout_start_others} onChange={this.blackoutStartDateOthersHandler} />\n                        </div>\n                        <div className=\"col-md-2 text-center\">\n                          <h6 className=\"black-color\">to</h6>\n                        </div>\n                        <div className=\"col-md-5 remove-padding\">\n                          <DatePicker className=\"form-control\" selected={this.state.blackout_end_others} onChange={this.blackoutEndDateOthersHandler} />\n                        </div>\n                      </div>\n                  </div>\n\n              </div>\n\n\n              <div className=\"form-row sale-information\">\n                <div className=\"row col-md-12\">\n                  <div className=\"\">\n                      <h3 className=\"information-headline\">Exceptions:</h3>\n                  </div>\n                  <div className=\"form-group col-md-2 add-btn\">\n                    <button type=\"button\" className=\"btn btn-success add-exception\" onClick={this.handleAddException}>\n                          <i className=\"fa fa-plus\"></i> Add Exception\n                      </button>\n                  </div>\n                </div>\n\n\n                {this.state.exceptions.map((item, idx) => (\n                  <div key={idx} className=\"row col-md-12 individual-exception\">\n                    <div className=\"form-group col-md-2\">\n                      <label htmlFor={`code_input_box_${idx + 1}`}><strong>Code Pair:</strong></label>\n                      <input type=\"text\" className=\"form-control\" id={`code_input_box_${idx + 1}`}  placeholder={`#${idx + 1}`} value={item.code} onChange={this.handleExceptionCodeChange(idx)} />\n                    </div>\n                    <div className=\"form-group col-md-5\">\n                      <label htmlFor={`travel_valid_input_box_${idx + 1}`}><strong>Travel Valid:</strong></label>\n                      <input type=\"text\" className=\"form-control\" id={`travel_valid_input_box_${idx + 1}`} placeholder={`Saturdays only`} value={item.travel_valid} onChange={this.handleExceptionTravelValid(idx)} />\n                    </div>\n                    <div className=\"form-group col-md-2\">\n                      <label htmlFor={`service_begins_datepicker_${idx + 1}`}><strong>Service Begins:</strong></label>\n                      <DatePicker className=\"form-control\" id={`service_begins_datepicker_${idx + 1}`} selected={item.service_begins} onChange={this.handleExceptionServiceBegins(idx)} />\n                    </div>\n                    <div className=\"form-group col-md-2\">\n                    <label htmlFor={`service_ends_datepicker_${idx + 1}`}><strong>Service Ends:</strong></label>\n                      <DatePicker className=\"form-control\" id={`service_ends_datepicker_${idx + 1}`} selected={item.service_ends} onChange={this.handleExceptionServiceEnds(idx)} />\n                    </div>\n\n                    {/* <button type=\"button\" onClick={this.handleRemoveException(idx)} className=\"small\">-</button> */}\n                    <div className=\"form-group col-md-1\">\n                      <button type=\"button\" className=\"btn btn-danger remove-exception\"  onClick={this.handleRemoveException(idx)}>\n                          <i className=\"fa fa-minus\"></i>\n                      </button>\n                    </div>\n                  </div>\n                ))}\n\n              </div>\n\n              <div className=\"form-row sale-information\">\n                {/* <div className=\"row col-md-12\">\n                  <div className=\"form-group col-md-6\">\n                    <label htmlFor=\"inputPassword4\">First Input</label>\n                    <input type=\"text\" className=\"form-control\" id=\"inputAddress\" value = {this.state.firstinput} onChange = {this.updateFirstInput} />\n                  </div>\n                  <div className=\"form-group col-md-6\">\n                    <div className=\"form-check\">\n                      <input className=\"form-check-input\" type=\"checkbox\" id=\"gridCheck\" />\n                      <label className=\"form-check-label\" htmlFor=\"gridCheck\">Check me out</label>\n                    </div>\n                  </div>\n                </div> */}\n                <div className=\"row col-md-12\">\n                  <div className=\"form-group col-md-9\">\n                    <button style={{marginTop:'15px'}} type=\"submit\" className=\"form-control btn btn-primary\" id=\"generate-xml\" >Generate XML</button>\n                  </div>\n\n                  <div className=\"form-group col-md-3\">\n                    <CSVLink\n                      data={saleDetailsHeaders}\n                      filename={this.state.mycsvsaledetailsfilename+\".csv\"}\n                      className=\"btn btn-warning csv-sale-details\"\n                      target=\"_blank\"\n                    ><i className=\"fa fa-download\"></i> CSV Sale Details</CSVLink>\n\n                    <CSVLink\n                      data={saleFareHeaders}\n                      filename={this.state.mycsvfilename+\".csv\"}\n                      className=\"btn btn-warning csv-sale-fares\"\n                      target=\"_blank\"\n                    ><i className=\"fa fa-download\"></i> CSV Fares</CSVLink>\n                  </div>\n\n                </div>\n              </div>\n            </form>\n\n            {/* XML OUTPUT LAYER */}\n            <div className=\"form-row output-information\">\n              <div className=\"row col-md-12\">\n                <div className=\"col-lg-10 col-md-8 col-sm-6\">\n                    <h3 className=\"\">Output:</h3>\n                </div>\n                <div className=\"form-group col-lg-1 col-md-2 col-sm-3\">\n                  <CopyToClipboard text={this.state.xmloutput}\n                  onCopy={() => this.setState({copied: true})}>\n                  <button type=\"submit\" className=\"btn btn-success copy-to-clipboard\"> <i className=\"fa fa-copy\"></i> Clipboard</button>\n                  </CopyToClipboard>\n                </div>\n                <div className=\"form-group col-lg-1 col-md-2 col-sm-3\">\n                  <button type=\"submit\" className=\"btn btn-warning copy-to-clipboard\" onClick={this.resetOutputVariable()}> <i className=\"fa fa-times\"></i> Clear</button>\n                </div>\n\n              </div>\n              <div className=\"row col-md-12\">\n                <div className=\"form-group col-md-12\">\n\n                    <pre id=\"pre-xml-output\">\n                          {this.state.xmloutput}\n                    </pre>\n                </div>\n              </div>\n            </div>\n\n\n\n\n\n\n              {/* CLEAN MY XML ROW */}\n              {/* <div className=\"form-row club49-information\">\n                  <div className=\"row col-md-12\">\n                      <h3 className=\"information-headline\">Clean My XML:</h3>\n                  </div>\n\n\n                  <div className=\"form-group col-md-12\">\n                      <div className=\"row col-md-12 individual-club49\">\n                          <div className=\"col-md-12\">\n                          <button type=\"submit\" className=\"btn btn-success clean-xml\" onClick={this.cleanFile()}> <i className=\"fa fa-brush\"></i> Clean XML</button>\n                          </div>\n\n                          <div className=\"row col-md-12\">\n                          <div className=\"form-group col-md-12\">\n\n                              <pre id=\"pre-xml-clean\">\n                                    {JSON.toString(this.state.clean)}\n                              </pre>\n                          </div>\n                        </div>\n                      </div>\n\n                  </div>\n\n\n\n              </div> */}\n\n\n\n\n\n\n\n\n        </div>\n\n\n\n\n\n\n      </div>\n      </div>\n    );\n\n\n\n\n  }\n\n\n}\n\nexport default App;\n","/Users/mmangruban/Desktop/github/fare-sale/src/reportWebVitals.js",[],"/Users/mmangruban/Desktop/github/fare-sale/src/Helper/Helper.js",[],"/Users/mmangruban/Desktop/github/fare-sale/src/index.js",[],{"ruleId":"49","severity":1,"message":"50","line":10,"column":8,"nodeType":"51","messageId":"52","endLine":10,"endColumn":17},{"ruleId":"49","severity":1,"message":"53","line":11,"column":19,"nodeType":"51","messageId":"52","endLine":11,"endColumn":30},{"ruleId":"49","severity":1,"message":"54","line":12,"column":10,"nodeType":"51","messageId":"52","endLine":12,"endColumn":24},{"ruleId":"55","severity":1,"message":"56","line":935,"column":52,"nodeType":"57","messageId":"58","endLine":935,"endColumn":54},{"ruleId":"55","severity":1,"message":"59","line":969,"column":30,"nodeType":"57","messageId":"58","endLine":969,"endColumn":32},{"ruleId":"49","severity":1,"message":"60","line":988,"column":9,"nodeType":"51","messageId":"52","endLine":988,"endColumn":17},{"ruleId":"55","severity":1,"message":"59","line":998,"column":30,"nodeType":"57","messageId":"58","endLine":998,"endColumn":32},{"ruleId":"55","severity":1,"message":"59","line":1319,"column":25,"nodeType":"57","messageId":"58","endLine":1319,"endColumn":27},{"ruleId":"55","severity":1,"message":"59","line":1385,"column":56,"nodeType":"57","messageId":"58","endLine":1385,"endColumn":58},{"ruleId":"55","severity":1,"message":"59","line":1387,"column":47,"nodeType":"57","messageId":"58","endLine":1387,"endColumn":49},{"ruleId":"55","severity":1,"message":"59","line":1391,"column":47,"nodeType":"57","messageId":"58","endLine":1391,"endColumn":49},{"ruleId":"55","severity":1,"message":"59","line":1404,"column":54,"nodeType":"57","messageId":"58","endLine":1404,"endColumn":56},{"ruleId":"55","severity":1,"message":"59","line":1432,"column":43,"nodeType":"57","messageId":"58","endLine":1432,"endColumn":45},{"ruleId":"55","severity":1,"message":"59","line":1458,"column":43,"nodeType":"57","messageId":"58","endLine":1458,"endColumn":45},{"ruleId":"55","severity":1,"message":"59","line":1483,"column":43,"nodeType":"57","messageId":"58","endLine":1483,"endColumn":45},{"ruleId":"49","severity":1,"message":"61","line":1516,"column":11,"nodeType":"51","messageId":"52","endLine":1516,"endColumn":47},{"ruleId":"55","severity":1,"message":"59","line":1529,"column":54,"nodeType":"57","messageId":"58","endLine":1529,"endColumn":56},{"ruleId":"55","severity":1,"message":"59","line":1679,"column":45,"nodeType":"57","messageId":"58","endLine":1679,"endColumn":47},{"ruleId":"55","severity":1,"message":"59","line":1699,"column":45,"nodeType":"57","messageId":"58","endLine":1699,"endColumn":47},{"ruleId":"55","severity":1,"message":"59","line":1747,"column":54,"nodeType":"57","messageId":"58","endLine":1747,"endColumn":56},{"ruleId":"55","severity":1,"message":"59","line":1898,"column":45,"nodeType":"57","messageId":"58","endLine":1898,"endColumn":47},{"ruleId":"55","severity":1,"message":"59","line":1918,"column":45,"nodeType":"57","messageId":"58","endLine":1918,"endColumn":47},{"ruleId":"55","severity":1,"message":"59","line":1942,"column":55,"nodeType":"57","messageId":"58","endLine":1942,"endColumn":57},{"ruleId":"55","severity":1,"message":"59","line":2104,"column":45,"nodeType":"57","messageId":"58","endLine":2104,"endColumn":47},{"ruleId":"55","severity":1,"message":"59","line":2124,"column":45,"nodeType":"57","messageId":"58","endLine":2124,"endColumn":47},{"ruleId":"55","severity":1,"message":"59","line":2177,"column":41,"nodeType":"57","messageId":"58","endLine":2177,"endColumn":43},{"ruleId":"55","severity":1,"message":"59","line":2178,"column":48,"nodeType":"57","messageId":"58","endLine":2178,"endColumn":50},{"ruleId":"55","severity":1,"message":"59","line":2226,"column":47,"nodeType":"57","messageId":"58","endLine":2226,"endColumn":49},{"ruleId":"49","severity":1,"message":"62","line":2274,"column":9,"nodeType":"51","messageId":"52","endLine":2274,"endColumn":10},{"ruleId":"55","severity":1,"message":"59","line":2277,"column":29,"nodeType":"57","messageId":"58","endLine":2277,"endColumn":31},"no-unused-vars","'XMLParser' is defined but never used.","Identifier","unusedVar","'CSVDownload' is defined but never used.","'AssertionError' is defined but never used.","array-callback-return","Array.prototype.some() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a return value from arrow function.","'temp_obj' is assigned a value but never used.","'what_exception_fares_to_make_xml_for' is assigned a value but never used.","'i' is assigned a value but never used."]